"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[644],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,g=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3983:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},u="Gestion des itin\xe9raires flottants",s={unversionedId:"Flutter/Route",id:"Flutter/Route",title:"Gestion des itin\xe9raires flottants",description:"L'itin\xe9raire dans le d\xe9veloppement mobile fait g\xe9n\xe9ralement r\xe9f\xe9rence \xe0 une page, ce qui est identique au concept d'itin\xe9raire dans le d\xe9veloppement Web pour les applications \xe0 page unique. La gestion des routes dans Flutter est similaire au d\xe9veloppement natif, \xe0 la fois Android et iOS, la gestion de la navigation maintiendra une pile de routes, l'op\xe9ration de route dans la pile (push) correspond \xe0 l'ouverture d'une nouvelle page, la route hors de la pile (pop ) correspond \xe0 l'op\xe9ration de fermeture de page, et la gestion des itin\xe9raires se r\xe9f\xe8re principalement \xe0 la fa\xe7on de g\xe9rer la pile d'itin\xe9raires.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/Flutter/Route.md",sourceDirName:"Flutter",slug:"/Flutter/Route",permalink:"/fr/docs/Flutter/Route",draft:!1,editUrl:"https://github.com/Malaaaa/blog-sample/tree/main/docs/Flutter/Route.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"La gestion des ressources",permalink:"/fr/docs/Flutter/ResourceM"},next:{title:"Introduction",permalink:"/fr/docs/intro"}},p={},d=[{value:"Mat\xe9rielPageRoute",id:"mat\xe9rielpageroute",level:2},{value:"Navigateur",id:"navigateur",level:2},{value:"Future push (contexte BuildContext, route route)",id:"future-push-contexte-buildcontext-route-route",level:3},{value:"bool pop (contexte BuildContext,  r\xe9sultat )",id:"bool-pop-contexte-buildcontext--r\xe9sultat-",level:3},{value:"M\xe9thodes d&#39;instance",id:"m\xe9thodes-dinstance",level:3},{value:"D\xe9passement d&#39;itin\xe9raire",id:"d\xe9passement-ditin\xe9raire",level:2},{value:"Exemple",id:"exemple",level:3},{value:"Itin\xe9raires nomm\xe9s",id:"itin\xe9raires-nomm\xe9s",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gestion-des-itin\xe9raires-flottants"},"Gestion des itin\xe9raires flottants"),(0,o.kt)("p",null,"L'itin\xe9raire dans le d\xe9veloppement mobile fait g\xe9n\xe9ralement r\xe9f\xe9rence \xe0 une page, ce qui est identique au concept d'itin\xe9raire dans le d\xe9veloppement Web pour les applications \xe0 page unique. La gestion des routes dans Flutter est similaire au d\xe9veloppement natif, \xe0 la fois Android et iOS, la gestion de la navigation maintiendra une pile de routes, l'op\xe9ration de route dans la pile (push) correspond \xe0 l'ouverture d'une nouvelle page, la route hors de la pile (pop ) correspond \xe0 l'op\xe9ration de fermeture de page, et la gestion des itin\xe9raires se r\xe9f\xe8re principalement \xe0 la fa\xe7on de g\xe9rer la pile d'itin\xe9raires."),(0,o.kt)("p",null,"Le nouveau routage est au m\xeame niveau que la page d'accueil et est un nouveau composant sans \xe9tat"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class NewRoute extend StatelessWidget \n``` The\n\nLe composant Botton appelle le\n\n```dart\n         onPressed: () {\n          // Naviguer vers la nouvelle route   \n          Navigator.push( context,\n           MaterialPageRoute(builder: (context) {\n              return NewRoute();\n}));\n")),(0,o.kt)("h2",{id:"mat\xe9rielpageroute"},"Mat\xe9rielPageRoute"),(0,o.kt)("p",null,"La classe ",(0,o.kt)("inlineCode",{parentName:"p"},"MaterialPageRoute")," h\xe9rite de la classe ",(0,o.kt)("inlineCode",{parentName:"p"},"PageRoute"),". La classe ",(0,o.kt)("inlineCode",{parentName:"p"},"PageRoute")," est une classe abstraite qui repr\xe9sente une page de route modale qui occupe tout l'espace de l'\xe9cran, et elle d\xe9finit \xe9galement l'interface et les propri\xe9t\xe9s li\xe9es \xe0 la construction de la route et aux animations de transition lors du basculement. ",(0,o.kt)("inlineCode",{parentName:"p"},"MaterialPageRoute")," est un composant fourni par la biblioth\xe8que de composants Material, qui peut obtenir le m\xeame style d'animation de changement de routage que l'animation de changement de page de plate-forme pour diff\xe9rentes plates-formes."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Pour Android, lors de l'ouverture d'une nouvelle page, la nouvelle page glissera du bas vers le haut de l'\xe9cran\xa0; lors de la fermeture d'une page, la page en cours glissera du haut vers le bas de l'\xe9cran et dispara\xeetra, tandis que la page pr\xe9c\xe9dente s'affichera \xe0 l'\xe9cran."),(0,o.kt)("li",{parentName:"ul"},"Pour iOS, lors de l'ouverture d'une page, la nouvelle page glissera de mani\xe8re coh\xe9rente du bord droit de l'\xe9cran vers le c\xf4t\xe9 gauche de l'\xe9cran jusqu'\xe0 ce que la nouvelle page soit enti\xe8rement affich\xe9e \xe0 l'\xe9cran, tandis que la page pr\xe9c\xe9dente dispara\xeetra en glissant de la page actuelle. \xe9cran sur le c\xf4t\xe9 gauche de l'\xe9cran\xa0; lors de la fermeture d'une page, c'est tout le contraire, la page actuelle glissera du c\xf4t\xe9 droit de l'\xe9cran, tandis que la page pr\xe9c\xe9dente glissera du c\xf4t\xe9 gauche de l'\xe9cran.")),(0,o.kt)("p",null,"Nous introduisons ici la signification de chaque param\xe8tre du constructeur ",(0,o.kt)("inlineCode",{parentName:"p"},"MaterialPageRoute"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"  MaterialPageRoute({\n    G\xe9n\xe9rateur WidgetBuilder,\n    Param\xe8tres RouteSettings,\n    bool\xe9en maintenatState = vrai,\n    bool\xe9en fullscreenDialog = faux,\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"builder")," est une fonction callback de type WidgetBuilder, qui sert \xe0 construire les sp\xe9cificit\xe9s de la page de route, la valeur de retour est un widget. nous devons g\xe9n\xe9ralement impl\xe9menter ce rappel pour renvoyer une instance de la nouvelle route."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"param\xe8tres")," contient les informations de configuration de la route, telles que le nom de la route, si la route initiale (page d'accueil)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sustainState"),": par d\xe9faut, lorsqu'une nouvelle route est empil\xe9e, la route d'origine est toujours stock\xe9e en m\xe9moire, si vous souhaitez lib\xe9rer toutes les ressources occup\xe9es par la route lorsqu'elle n'est pas utilis\xe9e, vous pouvez d\xe9finir ",(0,o.kt)("inlineCode",{parentName:"li"},"sustainState")," sur false."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fullscreenDialog")," indique si la nouvelle page de routage est une bo\xeete de dialogue modale plein \xe9cran. Dans iOS, si ",(0,o.kt)("inlineCode",{parentName:"li"},"fullscreenDialog")," est ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),", la nouvelle page glissera depuis le bas de l'\xe9cran (au lieu d'\xeatre horizontale).")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Si vous souhaitez personnaliser l'animation du commutateur de routage, vous pouvez h\xe9riter de PageRoute pour l'impl\xe9menter vous-m\xeame, et nous impl\xe9menterons un composant de routage personnalis\xe9 plus tard lorsque nous pr\xe9senterons l'animation.")),(0,o.kt)("h2",{id:"navigateur"},"Navigateur"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Navigator")," est un composant de gestion d'itin\xe9raire qui fournit des m\xe9thodes pour ouvrir et quitter les pages d'itin\xe9raire. ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator")," g\xe8re une collection de routes actives \xe0 travers une pile. Habituellement, la page actuellement affich\xe9e \xe0 l'\xe9cran est la route en haut de la pile. ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator")," fournit une s\xe9rie de m\xe9thodes pour g\xe9rer la pile de routage, nous ne d\xe9crivons ici que ses deux m\xe9thodes les plus couramment utilis\xe9es."),(0,o.kt)("h3",{id:"future-push-contexte-buildcontext-route-route"},"Future push (contexte BuildContext, route route)"),(0,o.kt)("p",null,"La valeur de retour est un objet ",(0,o.kt)("inlineCode",{parentName:"p"},"Future")," qui re\xe7oit les donn\xe9es de retour lorsque la nouvelle route quitte la pile (c'est-\xe0-dire qu'elle est ferm\xe9e)."),(0,o.kt)("h3",{id:"bool-pop-contexte-buildcontext--r\xe9sultat-"},"bool pop (contexte BuildContext, ","[ r\xe9sultat ]",")"),(0,o.kt)("p",null,"Acheminez le haut de la pile hors de la pile, ",(0,o.kt)("inlineCode",{parentName:"p"},"r\xe9sultat")," correspond aux donn\xe9es renvoy\xe9es \xe0 la page pr\xe9c\xe9dente lorsque la page est ferm\xe9e."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Navigator")," a de nombreuses autres m\xe9thodes, telles que ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator.replace"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator.popUntil"),', etc. Veuillez vous r\xe9f\xe9rer \xe0 la documentation de l\'API ou aux commentaires du code source du SDK pour plus de d\xe9tails, nous ne les r\xe9p\xe9terons donc pas ici. Ici, nous devons \xe9galement introduire un autre concept li\xe9 au routage, les "routes nomm\xe9es".'),(0,o.kt)("h3",{id:"m\xe9thodes-dinstance"},"M\xe9thodes d'instance"),(0,o.kt)("p",null,"Les m\xe9thodes statiques de la classe Navigator *",(0,o.kt)("strong",{parentName:"p"},"* avec le contexte comme premier param\xe8tre correspondent \xe0 une m\xe9thode d'instance Navigator **"),", par exemple ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator.push(BuildContext context, Route route)")," \xe9quivaut \xe0 ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator.of( context).push(Route route )")," , et les m\xe9thodes li\xe9es aux routes nomm\xe9es suivantes sont les m\xeames."),(0,o.kt)("h2",{id:"d\xe9passement-ditin\xe9raire"},"D\xe9passement d'itin\xe9raire"),(0,o.kt)("p",null,"Tr\xe8s souvent, nous devons prendre certains param\xe8tres lors des sauts de routage, par exemple, lors de l'ouverture de la page de d\xe9tails du produit, nous devons prendre un identifiant de produit, afin que la page de d\xe9tails du produit sache quelles informations sur le produit afficher; un autre exemple est que nous devons s\xe9lectionner l'adresse de livraison lors du traitement d'une commande, apr\xe8s avoir ouvert la page de s\xe9lection d'adresse et s\xe9lectionn\xe9 l'adresse, vous pouvez renvoyer l'adresse s\xe9lectionn\xe9e par l'utilisateur sur la page de commande, etc. Ce qui suit est un exemple simple pour montrer comment passer les anciens et les nouveaux itin\xe9raires."),(0,o.kt)("h3",{id:"exemple"},"Exemple"),(0,o.kt)("p",null,"Nous cr\xe9ons un itin\xe9raire ",(0,o.kt)("inlineCode",{parentName:"p"},"TipRoute")," , qui accepte un param\xe8tre de texte d'invite et se charge d'afficher le texte qui lui est transmis sur la page, en plus du ",(0,o.kt)("inlineCode",{parentName:"p"},"TipRoute")," , nous ajoutons un bouton \"Retour\", qui, lorsqu'il est cliqu\xe9, prendra un retour tout en revenant \xe0 la route pr\xe9c\xe9dente, regardons le code d'impl\xe9mentation."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Code d'impl\xe9mentation TipRoute"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'class TipRoute \xe9tend StatelessWidget {\n  TipRoute({\n    Key key,\n    @required this.text, // re\xe7oit un param\xe8tre de texte\n  }) : super(key: key);\n  texte de cha\xeene final\xa0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text("Tip"),\n      ),\n      body: Padding(\n        padding: EdgeInsets.all(18),\n        child : Center(\n          enfant : Colonne(\n            enfants : <Widget>[\n              Texte(texte),\n              RaisedButton(\n                onPressed : () => Navigator.pop(contexte, "Je suis la valeur de retour"),\n                enfant : Texte(" retour"),\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n')),(0,o.kt)("p",null,"Voici le code pour ouvrir le nouveau routage ",(0,o.kt)("inlineCode",{parentName:"p"},"TipRoute"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'class RouterTestRoute extend StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: RaisedButton(\n        onPressed: () async {\n          // Ouvrir `TipRoute` et attendre le r\xe9sultat de retour\n          var result = attendre Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) {\n                return TipRoute(\n                  // Route parameters\n                  text: "I am tip xxxx",\n                );\n              },\n            ),\n          );\n          / /output `TipRoute` route return result\n          print("Route return value: $result");\n        },\n        child: Text("Open prompt page"),\n      ),\n    );\n  }\n}\n')),(0,o.kt)("p",null,'Ex\xe9cutez le code ci-dessus et cliquez sur le bouton "Open Tip Page" sur la page ',(0,o.kt)("inlineCode",{parentName:"p"},"RouterTestRoute")," , ce qui ouvrira la page ",(0,o.kt)("inlineCode",{parentName:"p"},"TipRoute")," et s'ex\xe9cutera comme illustr\xe9 \xe0 la Figure 2-4 ci-dessous."),(0,o.kt)("p",null,"! ",(0,o.kt)("a",{parentName:"p",href:"https://pcdn.flutterchina.club/imgs/2-4.png"},"Illustration 2-4")),(0,o.kt)("p",null,"Note 1."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'le texte d\'invite "Je demande xxxx" est transmis \xe0 la nouvelle page de routage via le param\xe8tre ',(0,o.kt)("inlineCode",{parentName:"p"},"texte")," de ",(0,o.kt)("inlineCode",{parentName:"p"},"TipRoute"),". On peut attendre le ",(0,o.kt)("inlineCode",{parentName:"p"},"Future")," renvoy\xe9 par ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigator.push(...)")," pour obtenir les donn\xe9es de retour de la nouvelle route. 2.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dans la page ",(0,o.kt)("inlineCode",{parentName:"p"},"TipRoute"),' , il y a deux mani\xe8res de revenir \xe0 la page pr\xe9c\xe9dente ; la premi\xe8re consiste \xe0 cliquer directement sur la fl\xe8che de retour dans la barre de navigation, et la seconde consiste \xe0 cliquer sur le bouton "Retour" dans la page. La diff\xe9rence entre ces deux m\xe9thodes de retour est que la premi\xe8re ne renvoie pas de donn\xe9es \xe0 la route pr\xe9c\xe9dente, tandis que la seconde le fait. Voici la sortie de la m\xe9thode ',(0,o.kt)("inlineCode",{parentName:"p"},"print")," dans la page ",(0,o.kt)("inlineCode",{parentName:"p"},"RouterTestRoute")," de la console apr\xe8s avoir cliqu\xe9 respectivement sur le bouton de retour et la fl\xe8che de retour de la barre de navigation."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"I/flutter (27896) : valeur de retour de la route : je suis la valeur de retour\nI/flutter (27896) : valeur de retour de la route : null\n")))),(0,o.kt)("p",null,"Ce qui pr\xe9c\xe8de d\xe9crit la mani\xe8re de transmettre des valeurs pour des routes non nomm\xe9es. La fa\xe7on de transmettre des valeurs pour les routes nomm\xe9es sera diff\xe9rente, et nous la couvrirons lorsque nous pr\xe9senterons les routes nomm\xe9es ci-dessous."),(0,o.kt)("h2",{id:"itin\xe9raires-nomm\xe9s"},"Itin\xe9raires nomm\xe9s"))}m.isMDXComponent=!0}}]);