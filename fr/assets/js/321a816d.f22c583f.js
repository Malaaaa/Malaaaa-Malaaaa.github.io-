"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[160],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(o,".").concat(m)]||d[m]||c[m]||s;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<s;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8740:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},o="Apprentissage flottant",u={unversionedId:"Flutter/Flutter",id:"Flutter/Flutter",title:"Apprentissage flottant",description:"Aper\xe7u Aper\xe7u",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/Flutter/Flutter.md",sourceDirName:"Flutter",slug:"/Flutter/",permalink:"/fr/docs/Flutter/",draft:!1,editUrl:"https://github.com/Malaaaa/blog-sample/tree/main/docs/Flutter/Flutter.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"D\xe9bogage des applications Flutter",permalink:"/fr/docs/Flutter/Dartanalysis"}},p={},c=[{value:"Aper\xe7u Aper\xe7u",id:"aper\xe7u-aper\xe7u",level:2},{value:"Fondamentaux du langage Dart",id:"fondamentaux-du-langage-dart",level:2},{value:"D\xe9clarations de variables",id:"d\xe9clarations-de-variables",level:3},{value:"Les fonctions",id:"les-fonctions",level:3},{value:"Prise en charge asynchrone",id:"prise-en-charge-asynchrone",level:3},{value:"Avenir",id:"avenir",level:4},{value:"Futur.alors",id:"futuralors",level:5},{value:"Future.catchError",id:"futurecatcherror",level:3},{value:"Future.whenComplet",id:"futurewhencomplet",level:5},{value:"Future.wait",id:"futurewait",level:5},{value:"Asynchrone/attendre",id:"asynchroneattendre",level:4},{value:"L&#39;enfer des rappels",id:"lenfer-des-rappels",level:5},{value:"\xc9liminer l&#39;enfer des rappels avec Future",id:"\xe9liminer-lenfer-des-rappels-avec-future",level:5},{value:"\xc9liminer l&#39;enfer des rappels avec async/wait",id:"\xe9liminer-lenfer-des-rappels-avec-asyncwait",level:4},{value:"Flux",id:"flux",level:3},{value:"H\xe9ritage (\xe9tend)",id:"h\xe9ritage-\xe9tend",level:3},{value:"m\xe9langes (avec)",id:"m\xe9langes-avec",level:3},{value:"impl\xe9mentation d&#39;interface(impl\xe9mentations)",id:"impl\xe9mentation-dinterfaceimpl\xe9mentations",level:3}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"apprentissage-flottant"},"Apprentissage flottant"),(0,s.kt)("h2",{id:"aper\xe7u-aper\xe7u"},"Aper\xe7u Aper\xe7u"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"est le cadre d'interface utilisateur mobile de Google permettant de cr\xe9er rapidement des interfaces utilisateur natives de haute qualit\xe9 sur iOS et Android. Il peut \xe9galement \xeatre utilis\xe9 pour le Web et d'autres utilitaires multi-fins."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://book.flutterchina.club/"},"flottement pratique")," Les op\xe9rations suivantes sont \xe9galement bas\xe9es sur ce livre"),(0,s.kt)("li",{parentName:"ul"},"L'arbre DOM et l'arbre de contr\xf4le sont similaires",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Arbre DOM (html)\xa0! ",(0,s.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/Malaaaa/cloudimage/master/pic_htmltree.gif"},"arbre DOM")),(0,s.kt)("li",{parentName:"ul"},"Arbre de widgets (scintillement) ! ",(0,s.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/Malaaaa/cloudimage/master/OIP.Bw-atr2JI-0ypRc2E9JcZgHaGa"},"Arbre des widgets"))))),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Relations hi\xe9rarchiques comme Unity")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Flutter utilise son propre moteur de rendu hautes performances pour dessiner des widgets.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"La haute performance de Flutter est principalement assur\xe9e par deux choses, premi\xe8rement, Flutter APP est d\xe9velopp\xe9 en langage Dart, qui est fondamentalement \xe0 la m\xeame vitesse que JavaScript en mode JIT (Just-In-Time). Cependant, Dart prend en charge AOT, et lors de l'ex\xe9cution en mode AOT (compilation avant ex\xe9cution), JavaScript est loin derri\xe8re. L'augmentation de la vitesse est utile pour calculer les donn\xe9es de vue \xe0 des fr\xe9quences d'images \xe9lev\xe9es. Deuxi\xe8mement, Flutter utilise son propre moteur de rendu pour dessiner l'interface utilisateur, et les donn\xe9es de mise en page, etc. sont directement contr\xf4l\xe9es par le langage Dart, il n'est donc pas n\xe9cessaire de communiquer entre JavaScript et Native pendant le processus de mise en page comme RN, ce qui est un net avantage dans certains glissements. et faire glisser des sc\xe9narios.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Structure du cadre flottant"),(0,s.kt)("blockquote",{parentName:"li"},(0,s.kt)("p",{parentName:"blockquote"},"! ",(0,s.kt)("a",{parentName:"p",href:"https://pcdn.flutterchina.club/imgs/1-1.png"},"Structure du cadre")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\"Hot Reload\" ne reconstruit que l'int\xe9gralit\xe9 de l'arborescence des widgets)"))),(0,s.kt)("h2",{id:"fondamentaux-du-langage-dart"},"Fondamentaux du langage Dart"),(0,s.kt)("h3",{id:"d\xe9clarations-de-variables"},"D\xe9clarations de variables"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"var")),(0,s.kt)("p",{parentName:"li"},"Semblable \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"var")," en JavaScript, il peut recevoir des variables de n'importe quel type, mais la plus grande diff\xe9rence est qu'une fois qu'une variable var se voit attribuer une valeur dans Dart, le type est d\xe9termin\xe9 et le type ne peut pas \xeatre modifi\xe9, par exemple"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'var t;\nt = "salut monde"\xa0;\n// Le code suivant signalera une erreur dans dart, car le type de variable t a \xe9t\xe9 d\xe9termin\xe9 comme String.\n// Une fois le type d\xe9termin\xe9, il ne peut plus \xeatre modifi\xe9.\nt = 1000\xa0;\n')),(0,s.kt)("p",{parentName:"li"},"Dart est un langage fortement typ\xe9, toute variable a un type d\xe9fini. Dans Dart, lorsqu'une variable est d\xe9clar\xe9e avec ",(0,s.kt)("inlineCode",{parentName:"p"},"var"),", Dart d\xe9duira son type en fonction du type de la premi\xe8re affectation, et son type sera d\xe9termin\xe9 apr\xe8s compilation.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"dynamique")," et ",(0,s.kt)("strong",{parentName:"p"},"Objet")),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"`Object` est la classe racine de tous les objets Dart, c'est-\xe0-dire que tous les types sont des sous-classes de `Object` (y compris Function et Null), de sorte que tout type de donn\xe9es peut \xeatre affect\xe9 \xe0 un objet d\xe9clar\xe9 par `Object`. `dynamique` est le m\xeame mot cl\xe9 que `var`, et les variables d\xe9clar\xe9es peuvent \xeatre affect\xe9es \xe0 n'importe quel objet. Et `dynamique` est identique \xe0 `Objet` en ce sens que les variables qu'ils d\xe9clarent peuvent changer le type d'affectation \xe0 un stade ult\xe9rieur.\n\n```dart\nt dynamique\xa0;\nObjet x\xa0;\nt = \"salut monde\"\xa0;\nx = 'Bonjour Objet'\xa0;\n// Le code suivant est bon\nt = 1000;\n= 1000\xa0;\n```\n")),(0,s.kt)("p",{parentName:"li"},"   La diff\xe9rence entre ",(0,s.kt)("inlineCode",{parentName:"p"},"dynamique")," et ",(0,s.kt)("inlineCode",{parentName:"p"},"Objet")," est que le compilateur fournira toutes les combinaisons possibles d'objets d\xe9clar\xe9s par ",(0,s.kt)("inlineCode",{parentName:"p"},"dynamiques"),", L'objet d\xe9clar\xe9 par ",(0,s.kt)("inlineCode",{parentName:"p"},"Objet")," ne peut utiliser que les propri\xe9t\xe9s et les m\xe9thodes de Objet, sinon le compilateur signalera une erreur. Par exemple:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"}," dynamique a;\n Objet b\xa0;\n principale() {\n     une = \"\"\xa0;\n     = \"\"\xa0;\n     printLengths();\n }   \n\n printLengths() {\n     // pas d'avertissement\n     print(a.length);\n     // avertissement :\n     // Le getter 'length' n'est pas d\xe9fini pour la classe 'Object'\n     print(b.length);\n}\n")),(0,s.kt)("p",{parentName:"li"},"   La variable a ne signalera pas d'erreur, la variable b sera signal\xe9e par le compilateur"),(0,s.kt)("p",{parentName:"li"},"   Cette caract\xe9ristique de ",(0,s.kt)("inlineCode",{parentName:"p"},"dynamique")," est similaire au r\xf4le de ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," dans ",(0,s.kt)("inlineCode",{parentName:"p"},"Objective-C"),". Cette fonctionnalit\xe9 de ",(0,s.kt)("inlineCode",{parentName:"p"},"dynamique")," nous oblige \xe0 \xeatre prudent lors de son utilisation, car elle peut facilement introduire une erreur d'ex\xe9cution.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"final")," et ",(0,s.kt)("strong",{parentName:"p"},"const")),(0,s.kt)("p",{parentName:"li"},"Si vous n'avez jamais l'intention de modifier une variable, utilisez ",(0,s.kt)("inlineCode",{parentName:"p"},"final")," ou ",(0,s.kt)("inlineCode",{parentName:"p"},"const"),", et non ",(0,s.kt)("inlineCode",{parentName:"p"},"var"),"et non un type. Une variable ",(0,s.kt)("inlineCode",{parentName:"p"},"final")," ne peut \xeatre d\xe9finie qu'une seule fois, la diff\xe9rence \xe9tant qu'une variable ",(0,s.kt)("inlineCode",{parentName:"p"},"const")," est une constante de compilation et qu'une variable ",(0,s.kt)("inlineCode",{parentName:"p"},"final")," est initialis\xe9e la premi\xe8re fois qu'elle est utilis\xe9e. Les variables modifi\xe9es par ",(0,s.kt)("inlineCode",{parentName:"p"},"final")," ou ",(0,s.kt)("inlineCode",{parentName:"p"},"const")," ont des types de variables qui peuvent \xeatre omis, par exemple"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'// La d\xe9claration de type String peut \xeatre omise\nfinal str = "hi world";\n//cha\xeene finale str = "salut le monde"\xa0; \nconst str1 = "salut monde"\xa0;\n//const String str1 = "salut monde"\xa0;\n')))),(0,s.kt)("h3",{id:"les-fonctions"},"Les fonctions"),(0,s.kt)("p",null,"Dart est un v\xe9ritable langage orient\xe9 objet, donc m\xeame les fonctions sont des objets et ont un type ",(0,s.kt)("strong",{parentName:"p"},"Function"),". Cela signifie que les fonctions peuvent \xeatre affect\xe9es \xe0 des variables ou transmises en tant qu'arguments \xe0 d'autres fonctions, ce qui est typique de la programmation fonctionnelle."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"D\xe9claration de fonction"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"bool isNoble(int atomicNumber) {\n  return _nobleGases[atomicNumber]! = nul\xa0;\n}\n")),(0,s.kt)("p",{parentName:"li"},"   Les d\xe9clarations de fonction Dart qui ne d\xe9clarent pas explicitement le type de valeur de retour sont trait\xe9es comme ",(0,s.kt)("inlineCode",{parentName:"p"},"dynamique")," par d\xe9faut, notez qu'il n'y a pas d'inf\xe9rence de type pour la valeur de retour de la fonction."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"typedef bool RAPPEL();\n\n//ne sp\xe9cifiez pas le type de retour, la valeur par d\xe9faut est dynamique, pas bool\nisNoble(int atomicNumber) {\n  return _nobleGases[atomicNumber]! = nul\xa0;\n}\n\nvoid test(CALLBACK cb){\n   print(cb()); \n}\n// erreur, isNoble n'est pas un bool type\ntest(isNoble);\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Pour les fonctions qui ne contiennent qu'une seule expression, vous pouvez utiliser la syntaxe abr\xe9g\xe9e"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"bool isNoble (int atomicNumber) => _nobleGases [ atomicNumber ] ! = nul\xa0;   \n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Fonctions comme variables"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'var say = (str){\n  print(str);\n}\xa0;\nsay("salut le monde");\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Fonctions pass\xe9es en arguments"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'void execute(var callback) {\n    callback();\n}\nex\xe9cuter(() => imprimer("xxx"))\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Arguments positionnels facultatifs"),(0,s.kt)("p",{parentName:"li"},"   Enveloppez un ensemble d'arguments de fonction, marquez-les comme arguments positionnels facultatifs avec [] et placez-les \xe0 la fin de la liste d'arguments."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"String say(String from, String msg, [String device]) {\n  var r\xe9sultat = '$from dit $msg';\n  si (appareil ! = null) {\n    result = '$result with a $device';\n  }\n  renvoie le r\xe9sultat\xa0;\n}\n")),(0,s.kt)("p",{parentName:"li"},"   Voici un exemple d'appel de cette fonction sans arguments optionnels."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"say('Bob', 'Bonjour'); // le r\xe9sultat est : Bob dit bonjour\n")),(0,s.kt)("p",{parentName:"li"},"   Voici un exemple d'appel de cette fonction avec le troisi\xe8me argument."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"say('Bob', 'Howdy', 'smoke signal'); // le r\xe9sultat est\xa0: Bob dit bonjour avec un signal de fum\xe9e\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Param\xe8tres nomm\xe9s facultatifs"),(0,s.kt)("p",{parentName:"li"},"   Lors de la d\xe9finition d'une fonction, utilisez {param1, param2, ...}, plac\xe9 \xe0 la fin de la liste des param\xe8tres, pour sp\xe9cifier les param\xe8tres nomm\xe9s. Par exemple."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"// D\xe9finir les drapeaux [bold] et [hidden]\nvoid enableFlags({bool bold, bool hidden}) {\n    // ... \n}\n")),(0,s.kt)("p",{parentName:"li"},"   Lors de l'appel d'une fonction, vous pouvez utiliser le param\xe8tre nomm\xe9 sp\xe9cifi\xe9. Par exemple : ",(0,s.kt)("inlineCode",{parentName:"p"},"paramName : valeur")),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"enableFlags(gras\xa0: vrai, masqu\xe9\xa0: faux)\xa0;\n")),(0,s.kt)("p",{parentName:"li"},"   Les param\xe8tres nomm\xe9s optionnels sont tr\xe8s utilis\xe9s dans Flutter."),(0,s.kt)("p",{parentName:"li"},"   ",(0,s.kt)("strong",{parentName:"p"},"Notez que vous ne pouvez pas utiliser \xe0 la fois des param\xe8tres de position facultatifs et des param\xe8tres nomm\xe9s facultatifs")))),(0,s.kt)("h3",{id:"prise-en-charge-asynchrone"},"Prise en charge asynchrone"),(0,s.kt)("p",null,"La biblioth\xe8que de classes Dart poss\xe8de un tr\xe8s grand nombre de fonctions qui retournent ",(0,s.kt)("inlineCode",{parentName:"p"},"objets Future")," ou ",(0,s.kt)("inlineCode",{parentName:"p"},"Stream"),". Ces fonctions sont appel\xe9es ",(0,s.kt)("strong",{parentName:"p"},"Fonctions asynchrones"),": elles ne reviennent qu'apr\xe8s la mise en place d'une op\xe9ration chronophage, comme une op\xe9ration IO. Au lieu d'attendre que l'op\xe9ration soit termin\xe9e."),(0,s.kt)("p",null,"Les mots-cl\xe9s ",(0,s.kt)("inlineCode",{parentName:"p"},"async")," et ",(0,s.kt)("inlineCode",{parentName:"p"},"attendent")," prennent en charge la programmation asynchrone, ce qui vous permet d'\xe9crire du code asynchrone un peu comme du code synchrone."),(0,s.kt)("h4",{id:"avenir"},"Avenir"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Future")," est tr\xe8s similaire \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise")," en JavaScript et repr\xe9sente l'ach\xe8vement final (ou l'\xe9chec) d'une op\xe9ration asynchrone et la repr\xe9sentation de sa valeur de r\xe9sultat. En bref, il est utilis\xe9 pour g\xe9rer les op\xe9rations asynchrones. Si le traitement asynchrone r\xe9ussit, l'op\xe9ration r\xe9ussie est ex\xe9cut\xe9e et si le traitement asynchrone \xe9choue, une erreur est d\xe9tect\xe9e ou l'op\xe9ration suivante est arr\xeat\xe9e. Un Futur ne correspondra qu'\xe0 un seul r\xe9sultat, succ\xe8s ou \xe9chec."),(0,s.kt)("p",null,"Puisqu'il a beaucoup de fonctions, nous ne pr\xe9senterons ici que son API et ses fonctionnalit\xe9s communes. N'oubliez pas non plus que la valeur de retour de toutes les API ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," est toujours un objet ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," , il est donc facile d'encha\xeener les appels."),(0,s.kt)("h5",{id:"futuralors"},"Futur.alors"),(0,s.kt)("p",null,"Par exemple, dans ce cas, nous utilisons ",(0,s.kt)("inlineCode",{parentName:"p"},"Future.delayed"),' pour cr\xe9er une t\xe2che retard\xe9e (le sc\xe9nario r\xe9el serait une t\xe2che chronophage, comme une requ\xeate r\xe9seau) qui renvoie la cha\xeene de r\xe9sultat "hi world!" au bout de 2 secondes, puis on re\xe7oit le r\xe9sultat asynchrone en ',(0,s.kt)("inlineCode",{parentName:"p"},"puis")," et on imprime le r\xe9sultat avec le code suivant."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'Future.delayed(new Duration(seconds: 2), (){\n   return "hi world!";\n}).then((data){\n   print(data);\n});\n')),(0,s.kt)("h3",{id:"futurecatcherror"},"Future.catchError"),(0,s.kt)("p",null,"Si une erreur se produit dans une t\xe2che asynchrone, nous pouvons intercepter l'erreur dans ",(0,s.kt)("inlineCode",{parentName:"p"},"catchError"),", et nous changeons l'exemple ci-dessus en"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'Future.delayed(new Duration(seconds: 2),(){\n   //return "hi world!";\n   throw AssertionError("Error");  \n}).then((data){\n   //ex\xe9cuter avec succ\xe8s allez ici  \n   print("success");\n}).catchError((e){\n   //\xe9chec d\'ex\xe9cution va ici  \n   print(e);\n});\n')),(0,s.kt)("p",null,"Dans cet exemple, nous avons lev\xe9 une exception dans une t\xe2che asynchrone et la fonction de rappel ",(0,s.kt)("inlineCode",{parentName:"p"},"puis")," ne sera pas ex\xe9cut\xe9e, \xe0 la place la fonction de rappel ",(0,s.kt)("inlineCode",{parentName:"p"},"catchError")," sera appel\xe9e ; cependant, le rappel ",(0,s.kt)("inlineCode",{parentName:"p"},"catchError")," n'est pas le seul \xe0 intercepter les erreurs, la m\xe9thode ",(0,s.kt)("inlineCode",{parentName:"p"},"then")," a un param\xe8tre optionnel ",(0,s.kt)("inlineCode",{parentName:"p"},"onError")," que nous pouvons \xe9galement utiliser pour intercepter l'exception."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'Future.delayed(new Duration(seconds: 2), () {\n    //return "hi world!";\n    throw AssertionError("Error");\n}).then((data) {\n    print("success" );\n}, onError\xa0: (e) {\n    print(e);\n});\n')),(0,s.kt)("h5",{id:"futurewhencomplet"},"Future.whenComplet"),(0,s.kt)("p",null,"Il y a des moments o\xf9 nous rencontrons des sc\xe9narios o\xf9 nous devons faire quelque chose ind\xe9pendamment du succ\xe8s ou de l'\xe9chec de l'ex\xe9cution de la t\xe2che asynchrone, comme faire appara\xeetre la bo\xeete de dialogue de chargement avant la demande r\xe9seau et la fermer une fois la demande termin\xe9e. Le premier est de fermer la bo\xeete de dialogue en ",(0,s.kt)("inlineCode",{parentName:"p"},"puis")," ou ",(0,s.kt)("inlineCode",{parentName:"p"},"catch")," respectivement, et le second est d'utiliser ",(0,s.kt)("inlineCode",{parentName:"p"},"whenComplete")," callback of ",(0,s.kt)("inlineCode",{parentName:"p"},"Future"),", nous allons changer l'exemple ci-dessus comme suit"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'Future.delayed(new Duration(seconds: 2),(){\n   //return "hi world!";\n   throw AssertionError("Error");\n}).then((data){\n   // le succ\xe8s de l\'ex\xe9cution sera allez ici \n   print(data);\n}).catchError((e){\n   //\xc9chec de l\'ex\xe9cution va ici   \n   print(e);\n}).whenComplete((){\n   //ira ici s\'il r\xe9ussit ou \xe9choue\n});\n')),(0,s.kt)("h5",{id:"futurewait"},"Future.wait"),(0,s.kt)("p",null,"Il y a des moments o\xf9 nous devons attendre la fin de l'ex\xe9cution de plusieurs t\xe2ches asynchrones avant d'effectuer certaines op\xe9rations, par exemple, nous avons une interface qui doit d'abord r\xe9cup\xe9rer les donn\xe9es de deux interfaces Web s\xe9par\xe9ment, et apr\xe8s la r\xe9cup\xe9ration r\xe9ussie, nous devons effectuer des op\xe9rations sp\xe9cifiques traitement sur les deux donn\xe9es d'interface avant de les afficher sur l'interface utilisateur, comment devrions-nous faire cela\xa0? La r\xe9ponse est ",(0,s.kt)("inlineCode",{parentName:"p"},"Future.wait"),", qui accepte un tableau de ",(0,s.kt)("inlineCode",{parentName:"p"},"param\xe8tres Future")," , seulement apr\xe8s que les ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," du tableau sont ex\xe9cut\xe9s avec succ\xe8s, le rappel de succ\xe8s de ",(0,s.kt)("inlineCode",{parentName:"p"},"puis")," sera d\xe9clench\xe9, tant qu'il y a un ",(0,s.kt)("inlineCode",{parentName:"p"},"\xc9chec d'ex\xe9cution du futur")," , le rappel d'erreur sera d\xe9clench\xe9. Dans ce qui suit, nous simulons deux t\xe2ches asynchrones de r\xe9cup\xe9ration de donn\xe9es en simulant ",(0,s.kt)("inlineCode",{parentName:"p"},"Future.delayed"),", et lorsque les deux t\xe2ches asynchrones sont ex\xe9cut\xe9es avec succ\xe8s, les r\xe9sultats des deux t\xe2ches asynchrones sont assembl\xe9s et imprim\xe9s, avec le code suivant."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'Future.wait([\n  // renvoie le r\xe9sultat apr\xe8s 2 secondes  \n  Future.delayed(new Duration(seconds: 2), () {\n    return "hello";\n  }),\n  // renvoie le r\xe9sultat apr\xe8s 4 secondes  \n  Future.delayed(new Duration(seconds: 4), () {\n    return " world";\n  })\n]).then((results){\n  print(results[0]+results[1]);\n}).catchError( (e){\n  print(e);\n});\n')),(0,s.kt)("p",null,'Ex\xe9cutez le code ci-dessus et vous verrez "hello world" dans la console apr\xe8s 4 secondes.'),(0,s.kt)("h4",{id:"asynchroneattendre"},"Asynchrone/attendre"),(0,s.kt)("p",null,"La fonction et l'utilisation de ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait")," dans Dart et ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait")," dans JavaScript sont exactement les m\xeames, donc si vous connaissez d\xe9j\xe0 l'utilisation de ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait")," dans JavaScript, vous pouvez simplement ignorer cette section."),(0,s.kt)("h5",{id:"lenfer-des-rappels"},"L'enfer des rappels"),(0,s.kt)("p",null,"S'il y a beaucoup de logique asynchrone dans le code, et s'il y a beaucoup de t\xe2ches asynchrones qui d\xe9pendent des r\xe9sultats d'autres t\xe2ches asynchrones, il y a forc\xe9ment une situation de rappel dans le rappel ",(0,s.kt)("inlineCode",{parentName:"p"},"Future.then"),". Par exemple, supposons qu'il existe un sc\xe9nario d'exigence o\xf9 l'utilisateur se connecte d'abord, puis obtient l'ID utilisateur apr\xe8s une connexion r\xe9ussie, puis demande les informations personnelles de l'utilisateur via l'ID utilisateur, et apr\xe8s avoir obtenu les informations personnelles de l'utilisateur, nous devons cachez-le dans le syst\xe8me de fichiers local pour en faciliter l'utilisation, avec le code suivant."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"// D\xe9finissez d'abord chaque t\xe2che asynchrone s\xe9par\xe9ment\nFuture<String> login(String userName, String pwd){\n...\n    //connexion utilisateur\n}\xa0;\nFutur<String> getUserInfo(String id){\n...\n    //obtenir les informations utilisateur \n}\xa0;\nFuture saveUserInfo(String userInfo){\n...\n    // Enregistrer les informations utilisateur \n}\xa0; \n")),(0,s.kt)("p",null,"Ensuite, ex\xe9cutez l'int\xe9gralit\xe9 du flux de t\xe2ches."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"login(\"alice\", \"******\").then((id){\n //obtenir les informations de l'utilisateur par, id apr\xe8s une connexion r\xe9ussie    \n getUserInfo(id).then((userInfo){\n    //Obtenir les informations de l'utilisateur et enregistrez-les \n    saveUserInfo(userInfo).then((){\n       //Enregistrer les informations de l'utilisateur et effectuer d'autres op\xe9rations next\n...\n    });\n  });\n})\n")),(0,s.kt)("p",null,"S'il y a beaucoup de d\xe9pendances asynchrones dans la logique m\xe9tier, il y aura un rappel \xe0 l'int\xe9rieur du rappel, trop d'imbrication entra\xeenera une diminution de la lisibilit\xe9 et du taux d'erreur, et il est tr\xe8s difficile \xe0 maintenir, ce probl\xe8me est appel\xe9 imaginativement ",(0,s.kt)("strong",{parentName:"p"},"Callback Hell"),". Le probl\xe8me de l'enfer du rappel \xe9tait tr\xe8s important dans JavaScript auparavant, et \xe9tait le point le plus contr\xf4l\xe9 de JavaScript, mais avec la publication des normes ECMAScript6 et ECMAScript7, ce probl\xe8me a \xe9t\xe9 tr\xe8s bien r\xe9solu, et les deux outils magiques pour r\xe9soudre l'enfer du rappel sont l'introduction de ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise")," dans ECMAScript6 et l'introduction de ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise")," dans ECMAScript7. et l'introduction de ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait")," dans ECMAScript7. Dans Dart, les deux sont presque compl\xe8tement paniqu\xe9s en JavaScript\xa0: ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," \xe9quivaut \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),", et ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait")," ne change m\xeame pas de nom. Voyons ensuite comment nous pouvons \xe9liminer le probl\xe8me d'imbrication dans l'exemple ci-dessus en utilisant ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," et ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait"),"."),(0,s.kt)("h5",{id:"\xe9liminer-lenfer-des-rappels-avec-future"},"\xc9liminer l'enfer des rappels avec Future"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'login("alice", "******").then((id){\n   return getUserInfo(id);\n}).then((userInfo){\n    return saveUserInfo(userInfo);\n}). then((e){\n   //ex\xe9cute l\'action suivante \n}).catchError((e){\n  // gestion des erreurs  \n  print(e);\n});\n')),(0,s.kt)("p",null,"Comme mentionn\xe9 ci-dessus, ",(0,s.kt)("em",{parentName:"p"},'"la valeur de retour de toutes les API de ',(0,s.kt)("inlineCode",{parentName:"em"},"Future")," est toujours un objet ",(0,s.kt)("inlineCode",{parentName:"em"},"Future")," , il est donc facile d'encha\xeener les appels \"")," , si un ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," est renvoy\xe9 dans alors, le ",(0,s.kt)("inlineCode",{parentName:"p"},"futur")," s'ex\xe9cutera , et la fin de l'ex\xe9cution d\xe9clenchera le Le callback ",(0,s.kt)("inlineCode",{parentName:"p"},"puis")," sera d\xe9clench\xe9 apr\xe8s l'ex\xe9cution, de sorte que l'imbrication des couches est \xe9vit\xe9e en descendant s\xe9quentiellement."),(0,s.kt)("h4",{id:"\xe9liminer-lenfer-des-rappels-avec-asyncwait"},"\xc9liminer l'enfer des rappels avec async/wait"),(0,s.kt)("p",null,"Existe-t-il un moyen d'ex\xe9cuter des t\xe2ches asynchrones pendant que nous \xe9crivons du code synchrone sans utiliser de rappels\xa0? La r\xe9ponse est oui, il s'agit d'utiliser ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait"),", ce qui suit nous regardons directement le code d'abord, puis expliquons, le code est le suivant."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'t\xe2che() asynchrone {\n   essayer{\n    ID de cha\xeene = attendre login("alice", "******");\n    Cha\xeene userInfo = attendre getUserInfo(id);\n    attendre saveUserInfo(userInfo);\n    //ex\xe9cute l\'action suivante   \n   } catch(e){\n    // gestion des erreurs   \n    print(e);   \n   }  \n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"async")," est utilis\xe9 pour indiquer que la fonction est asynchrone, et la fonction d\xe9finie renvoie un objet ",(0,s.kt)("inlineCode",{parentName:"li"},"Future")," , qui peut \xeatre utilis\xe9 pour ajouter une fonction de rappel \xe0 l'aide de la m\xe9thode then."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"await")," est suivi d'un ",(0,s.kt)("inlineCode",{parentName:"li"},"Future"),", qui indique qu'il attend que cette t\xe2che asynchrone se termine et ne s'arr\xeatera que lorsque l'asynchronie sera termin\xe9e\xa0; ",(0,s.kt)("inlineCode",{parentName:"li"},"wait")," doit appara\xeetre dans la fonction ",(0,s.kt)("inlineCode",{parentName:"li"},"async"),".")),(0,s.kt)("p",null,"Comme vous pouvez le voir, nous avons repr\xe9sent\xe9 un flux asynchrone en code synchrone par ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait"),"."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"En fait, dans JavaScript et Dart, ",(0,s.kt)("inlineCode",{parentName:"p"},"async/wait")," n'est qu'un sucre syntaxique que le compilateur ou l'interpr\xe9teur traduira \xe9ventuellement en une cha\xeene d'appels \xe0 une Promise (Future).")),(0,s.kt)("h3",{id:"flux"},"Flux"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Stream")," est \xe9galement utilis\xe9 pour recevoir des donn\xe9es d'\xe9v\xe9nements asynchrones, contrairement \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"Future"),", il peut recevoir le r\xe9sultat de plusieurs op\xe9rations asynchrones (succ\xe8s ou \xe9chec). Autrement dit, lors de l'ex\xe9cution d'une t\xe2che asynchrone, les donn\xe9es de r\xe9sultat ou les exceptions d'erreur peuvent \xeatre transmises en d\xe9clenchant plusieurs fois l'\xe9v\xe9nement de r\xe9ussite ou d'\xe9chec. ",(0,s.kt)("inlineCode",{parentName:"p"},"Le flux")," est souvent utilis\xe9 dans des sc\xe9narios de t\xe2ches asynchrones o\xf9 les donn\xe9es sont lues plusieurs fois, telles que le t\xe9l\xe9chargement de contenu r\xe9seau, la lecture et l'\xe9criture de fichiers, etc. Par exemple."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'Stream.fromFutures([\n  // retourne le r\xe9sultat apr\xe8s 1 seconde\n  Future.delayed(new Duration(seconds: 1), () {\n    return "hello 1";\n  }),\n  // Lance une exception\n  Future. delay(new Duration(seconds: 2), () {\n    throw AssertionError("Error");\n  }),\n  // renvoie le r\xe9sultat apr\xe8s 3 secondes\n  Future.delayed(new Duration(seconds: 3), () {\n    return "hello 3"\xa0;\n  })\n]).listen((data){\n   print(data);\n}, onError\xa0: (e){\n   print(e.message);\n},onDone\xa0: () {\n\n});\n')),(0,s.kt)("p",null,"Le code ci-dessus sortira \xe0 son tour."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"I/flottement (17666) : bonjour 1\nI/flottement (17666) : erreur\nI/flottement (17666) : bonjour 3\n")),(0,s.kt)("h3",{id:"h\xe9ritage-\xe9tend"},"H\xe9ritage (\xe9tend)"),(0,s.kt)("p",null,"Les r\xe8gles d'h\xe9ritage dans Dart."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Les sous-classes utilisent le mot cl\xe9 extend pour h\xe9riter de la classe parent"),(0,s.kt)("li",{parentName:"ul"},"Les sous-classes h\xe9ritent des propri\xe9t\xe9s et des m\xe9thodes visibles dans la classe parent, mais pas du constructeur."),(0,s.kt)("li",{parentName:"ul"},"les sous-classes peuvent remplacer les m\xe9thodes getter et setter du parent"),(0,s.kt)("li",{parentName:"ul"},"les sous-classes remplacent les m\xe9thodes de la superclasse avec @override"),(0,s.kt)("li",{parentName:"ul"},"les sous-classes appellent des m\xe9thodes de superclasse avec super"),(0,s.kt)("li",{parentName:"ul"},"Les sous-classes peuvent h\xe9riter des variables non priv\xe9es de la classe parent")),(0,s.kt)("h3",{id:"m\xe9langes-avec"},"m\xe9langes (avec)"),(0,s.kt)("p",null,"Le mot chinois pour mixins signifie m\xe9langer, ce qui signifie m\xe9langer d'autres fonctions de la classe. Dans Dart, les mixins peuvent \xeatre utilis\xe9s pour obtenir des fonctionnalit\xe9s similaires \xe0 l'h\xe9ritage multiple car les conditions d'utilisation des mixins ont chang\xe9 avec la version Dart, voici les conditions d'utilisation des mixins dans Dart 2.x."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"(1) comme la classe mixins ne peut h\xe9riter que de l'objet, ne peut pas h\xe9riter des autres classes"),(0,s.kt)("li",{parentName:"ul"},"(2) la classe en tant que mixins ne peut pas avoir de constructeur"),(0,s.kt)("li",{parentName:"ul"},"(3) une classe peut m\xe9langer plus d'une classe de mixins"),(0,s.kt)("li",{parentName:"ul"},"(4) mixins n'est jamais un h\xe9ritage, ni une interface, mais une toute nouvelle fonctionnalit\xe9 Regardez le code sp\xe9cifique.")),(0,s.kt)("h3",{id:"impl\xe9mentation-dinterfaceimpl\xe9mentations"},"impl\xe9mentation d'interface(impl\xe9mentations)"),(0,s.kt)("p",null,"  Flutter n'a pas d'interfaces, mais chaque classe de Flutter est une interface implicite qui contient toutes les variables membres et les m\xe9thodes d\xe9finies de la classe. Si vous avez une classe A et que vous voulez que la classe B ait l'API de A, mais que vous ne voulez pas avoir l'impl\xe9mentation de A, alors vous devez traiter A comme une interface, et la classe B impl\xe9mente la classe A. Donc dans Flutter\xa0: la classe est l'interface"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Lorsqu'une classe est utilis\xe9e comme interface, les m\xe9thodes de la classe sont les m\xe9thodes de l'interface et doivent \xeatre r\xe9impl\xe9ment\xe9es dans la sous-classe, avec @override dans l'impl\xe9mentation de la sous-classe."),(0,s.kt)("li",{parentName:"ul"},"Lorsqu'une classe est utilis\xe9e comme interface, les variables membres de la classe doivent \xe9galement \xeatre r\xe9impl\xe9ment\xe9es dans la sous-classe. Ajouter @override devant les variables membres")))}m.isMDXComponent=!0}}]);