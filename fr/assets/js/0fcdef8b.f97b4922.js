"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[952],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=o.createContext({}),c=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(a.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),p=r,d=m["".concat(a,".").concat(p)]||m[p]||f[p]||s;return t?o.createElement(d,i(i({ref:n},u),{},{components:t})):o.createElement(d,i({ref:n},u))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=m;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9191:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return f}});var o=t(7462),r=t(3366),s=(t(7294),t(3905)),i=["components"],l={},a="Common built-in modules",c={unversionedId:"Nodejs/Common_built-in_modules",id:"Nodejs/Common_built-in_modules",title:"Common built-in modules",description:"path",source:"@site/docs/Nodejs/Common_built-in_modules.md",sourceDirName:"Nodejs",slug:"/Nodejs/Common_built-in_modules",permalink:"/fr/docs/Nodejs/Common_built-in_modules",draft:!1,editUrl:"https://github.com/Malaaaa/blog-sample/tree/main/docs/Nodejs/Common_built-in_modules.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/fr/docs/Nodejs/"},next:{title:"HookUse",permalink:"/fr/docs/React/HookUse"}},u={},f=[{value:"path",id:"path",level:2},{value:"fs",id:"fs",level:2},{value:"events (Asynchronous event) Sending events and listening to events are done through the EventEmitter class, and they both belong to the events object.",id:"events-asynchronous-event-sending-events-and-listening-to-events-are-done-through-the-eventemitter-class-and-they-both-belong-to-the-events-object",level:2}],m={toc:f};function p(e){var n=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"common-built-in-modules"},"Common built-in modules"),(0,s.kt)("h2",{id:"path"},"path"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const path = require("path");\nconst filepath = "/User/abc.txt";\n\nconsole.log(path.dirname(filepath));\nconsole.log(path.basename(filepath));\nconsole.log(path.extname(filepath));\n// 2.join\nconst basepath = "../User/abc";\nconst filename = "./abc.txt";\nconst othername = "./abc.js";\nconst filepath1 = path.join(basepath, filename);\n// console.log(filepath1);\n// resolve  the spliced path string has a / or . / or . / or .\nconst filepath2 = path.resolve(basepath, filename, othername);\nconsole.log(filepath2);\nconst result = path.resolve(basepath2, filename2);\nconsole.log(result);\n')),(0,s.kt)("h2",{id:"fs"},"fs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\nconst filepath = "./abc.txt";\n// 1.Synchronized operation\nconst info = fs.statSync(filepath);\nconsole.log("Code to be executed later");\nconsole.log(info);\n// 2.Asynchronous operations\nfs.stat(filepath, (err, info) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log(info);\n  console.log(info.isFile());\n  console.log(info.isDirectory());\n});\nconsole.log("Code to be executed later");\n// 3. Promise\nfs.promises\n  .stat(filepath)\n  .then((info) => {\n    console.log(info);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\nconsole.log("Code to be executed later");\n\nfs.open("./abc.txt", (err, fd) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n});\n// Get information about a file by its descriptor\nfs.fstat(fd, (err, info) => {\n  console.log(info);\n});\n// File Write\nfs.writeFile("./abc.txt", content, { flag: "a" }, (err) => {\n  console.log(err);\n});\n\n// File Reading\nfs.readFile("./abc.txt", { encoding: "utf-8" }, (err, data) => {\n  console.log(data);\n});\n\n// Create Folder\nconst dirname = "./malaaa";\nif (!fs.existsSync(dirname)) {\n  fs.mkdir(dirname, (err) => {\n    console.log(err);\n  });\n}\n// Read all files in a folder (recursion)\nfunction getFiles(dirname) {\n  fs.readdir(dirname, { withFileTypes: true }, (err, files) => {\n    for (let file of files) {\n      if (file.isDirectory()) {\n        const filepath = path.resolve(dirname, file.name);\n        getFiles(filepath);\n      } else {\n        console.log(file.name);\n      }\n    }\n  });\n}\ngetFiles(dirname);\n\n// 3.rename\nfs.rename("./malaaa", "./kobe", (err) => {\n  console.log(err);\n});\n')),(0,s.kt)("h2",{id:"events-asynchronous-event-sending-events-and-listening-to-events-are-done-through-the-eventemitter-class-and-they-both-belong-to-the-events-object"},"events (Asynchronous event) Sending events and listening to events are done through the EventEmitter class, and they both belong to the events object."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const EventEmitter = require("events");\nconst emitter = new EventEmitter();\nemitter.on("click", (args) => {\n  console.log("Listening to 1 to click events", args);\n});\nconst listener2 = (args) => {\n  console.log("Listening to 2 to click events", args);\n};\nemitter.on("click", listener2);\n\nemitter.on("tap", (args) => {\n  console.log(args);\n});\nsetTimeout(() => {\n  emitter.emit("click", "malaaa", "james", "kobe");\n  emitter.off("click", listener2);\n  emitter.emit("click", "malaaa", "james", "kobe");\n}, 2000);\n// Get subscribed events\nconsole.log(emitter.eventNames());\nconsole.log(emitter.listenerCount("click"));\nconsole.log(emitter.listeners("click"));\n')))}p.isMDXComponent=!0}}]);