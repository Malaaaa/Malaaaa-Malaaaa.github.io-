"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[625],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(t),f=l,u=m["".concat(c,".").concat(f)]||m[f]||d[f]||i;return t?a.createElement(u,r(r({ref:n},p),{},{components:t})):a.createElement(u,r({ref:n},p))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2910:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=t(7462),l=t(3366),i=(t(7294),t(3905)),r=["components"],o={},c=void 0,s={unversionedId:"CSAPP/Linking",id:"CSAPP/Linking",title:"Linking",description:"Translates the example program from an ASCII source file into an executable object file.",source:"@site/docs/CSAPP/Linking.md",sourceDirName:"CSAPP",slug:"/CSAPP/Linking",permalink:"/docs/CSAPP/Linking",editUrl:"https://github.com/Malaaaa/blog-sample/tree/main/docs/CSAPP/Linking.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Exceptional Control Flow",permalink:"/docs/CSAPP/Exceptional Control Flow"},next:{title:"Network",permalink:"/docs/CSAPP/Network"}},p=[{value:"Translates the example program from an ASCII source file into an executable object file.",id:"translates-the-example-program-from-an-ascii-source-file-into-an-executable-object-file",children:[],level:3},{value:"Object Files",id:"object-files",children:[{value:"Symbols",id:"symbols",children:[{value:"How Linkers Resolve Duplicate Symbol Names",id:"how-linkers-resolve-duplicate-symbol-names",children:[],level:6}],level:4},{value:"Relocation",id:"relocation",children:[{value:"objdump relocation entries",id:"objdump-relocation-entries",children:[],level:6}],level:4},{value:"Executable Object Files",id:"executable-object-files",children:[],level:4},{value:"Loading Executable Object Files",id:"loading-executable-object-files",children:[],level:4},{value:"Static Linking",id:"static-linking",children:[],level:4},{value:"Dynamic Linking",id:"dynamic-linking",children:[{value:"The dynamic linker then finishes the linking task by performing the following relocations:",id:"the-dynamic-linker-then-finishes-the-linking-task-by-performing-the-following-relocations",children:[],level:5},{value:"Dynamic linking is a powerful and useful technique:",id:"dynamic-linking-is-a-powerful-and-useful-technique",children:[],level:5}],level:4},{value:"Position-Independent Code (PIC)",id:"position-independent-code-pic",children:[],level:4},{value:"Library Interpositioning",id:"library-interpositioning",children:[{value:"1. Compile-Time Interpositioning",id:"1-compile-time-interpositioning",children:[],level:5},{value:"2. Link-Time Interpositioning",id:"2-link-time-interpositioning",children:[],level:5},{value:"3. Run-Time Interpositioning",id:"3-run-time-interpositioning",children:[],level:5}],level:4}],level:3}],d={toc:p};function m(e){var n=e.components,o=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"translates-the-example-program-from-an-ascii-source-file-into-an-executable-object-file"},"Translates the example program from an ASCII source file into an executable object file."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img_6.png",src:t(3950).Z,width:"554",height:"141"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"C preprocessor: cpp ","[other arguments]"," hello.c /tmp/main.i"),(0,i.kt)("li",{parentName:"ol"},"C compiler: cc1 /tmp/hello.i -Og ","[other arguments]"," -o /tmp/hello.s"),(0,i.kt)("li",{parentName:"ol"},"assembler: as ","[other arguments]"," -o /tmp/hello.o /tmp/hello.s"),(0,i.kt)("li",{parentName:"ol"},"linker program: ld -o hello ","[system object files and args]"," /tmp/hello.o /libc.a/printf.o"),(0,i.kt)("li",{parentName:"ol"},"executable prog: linux> ./hello")),(0,i.kt)("h3",{id:"object-files"},"Object Files"),(0,i.kt)("p",null,"Executable and Linkable Format(ELF).\n",(0,i.kt)("img",{alt:"img_3.png",src:t(2217).Z,width:"824",height:"684"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".text The machine code of the compiled program.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".rodata ",(0,i.kt)("strong",{parentName:"p"},"Read-only")," data such as the format strings in printf statements, and\njump tables for switch statements.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".data Initialized global and static C variables. Local C variables are maintained\nat run time on the stack and do not appear in either the .data or .bss\nsections.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".bss Uninitialized global and static C variables, along with any global or static\nvariables that are initialized to zero. No space have same addresses with .comment.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".symtab A symbol table with information about functions and global variables\nthat are defined and referenced in the program.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".rel Relocation information")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".line A mapping line numbers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".strtab A string table")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Relocatable object file. Contains binary code and data in a form that can be combined with other relocatable object files at compile time to create an executable object file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Executable object file. Contains binary code and data in a form that can be copied directly into memory and executed.\n",(0,i.kt)("img",{alt:"img_2.png",src:t(4215).Z,width:"1236",height:"694"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Shared object file. A special type of relocatable object file that can be loaded into memory and linked dynamically, at either load time or run time."))),(0,i.kt)("h4",{id:"symbols"},"Symbols"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Global symbols defined by module m and that can be referenced by\nother modules. OR referenced by module m but defined by some other\nmodule."),(0,i.kt)("li",{parentName:"ul"},"Local symbols that are defined and referenced exclusively by module m.")),(0,i.kt)("h6",{id:"how-linkers-resolve-duplicate-symbol-names"},"How Linkers Resolve Duplicate Symbol Names"),(0,i.kt)("p",null,"strong symbols: int i = 1;\nweak symbols: int i; int main(i =1); int ",(0,i.kt)("strong",{parentName:"p"},"attribute"),"((weak)) power2(int x);int power2(int x) ",(0,i.kt)("strong",{parentName:"p"},"attribute"),"((weak));extern int ",(0,i.kt)("strong",{parentName:"p"},"attribute"),"((weak)) global_var;\nRule 1. Multiple strong symbols with the same name are not allowed.\nRule 2. Given a strong symbol and multiple weak symbols with the same name,\nchoose the strong symbol.\nRule 3. Given multiple weak symbols with the same name, choose any of the\nweak symbols."),(0,i.kt)("h4",{id:"relocation"},"Relocation"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Relocating sections and symbol definitions. In this step, the linker merges all\nsections of the same type into a new aggregate section of the same type.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Relocating symbol references within sections. In this step, the linker modifies\nevery symbol reference in the bodies of the code and data sections so that\nthey point to the correct run-time addresses."))),(0,i.kt)("p",null,"Relocation entries for code are placed in .rel.text. Relocation entries for data\nare placed in .rel.data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*main.c*/\nvoid swap();\nint buf[2] = {1, 2};\nint main() {\n    swap();\n    return 0;\n}\n/*swap.c*/\nextern int buf [] ;\nint *bufp0 = &buf[0] ;\nint *bufp1;\nvoid swap() {\n    int temp;\n    bufp1 = &buf[1];\n    temp =*bufp0;\n    *bufp0 = *bufp1;\n    *bufp1 = temp;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"malaaa@malaaa-N8xxEP6> gcc -c swap.c -o swap.o//Relocatable object file\nmalaaa@malaaa-N8xxEP6> gcc -c main.c -o main.o//Relocatable object file\nmalaaa@malaaa-N8xxEP6> gcc -g swap.o main.o -o run//Executable object file\nmalaaa@malaaa-N8xxEP6> readelf -s swap.o\nmalaaa@malaaa-N8xxEP6> readelf -s main.o\n")),(0,i.kt)("p",null,"Result"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"swap.o\nSymbol table '.symtab' contains 14 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS swap.c\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 \n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    9 \n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT   10 \n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 \n    10: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    5 bufp0\n    11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf\n    12: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    4 bufp1\n    13: 0000000000000000    67 FUNC    GLOBAL DEFAULT    1 swap\n")),(0,i.kt)("p",null,"buf\uff0c\u662fswap.o.symTable\u7684\u6761\u76ee\uff0cextern\u7c7b\u578b\u7684\u7b26\u53f7\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u5728main.o\u6a21\u5757\u4e2d\u5b9a\u4e49\uff01"),"\uff0c\u6211\u4eec\u770b\u5230\u4e00\u4e2a\u5173\u4e8e\u5168\u5c40\u7b26\u53f7 buf \u5b9a\u4e49\u7684\u6761\u76ee\uff0c\u5b83\u662f\u4ece .data \u4e2d\u504f\u79fb\u4e3a 0 \u5904\u5f00\u59cb\u7684\u4e00\u4e2a 8 \u5b57\u8282\u7684\u5df2\u521d\u59cb\u5316\u76ee\u6807. \\\nbufp0\uff1a\u662fswap.o.symTable\u7684\u6761\u76ee\uff0cglobal\u7c7b\u578b\u7b26\u53f7\uff0c\u5728swap.o\u4e2d\u5b9a\u4e49\uff0c\u6211\u4eec\u770b\u5230\u4e00\u4e2a\u5173\u4e8e\u5168\u5c40\u7b26\u53f7 bufpO \u5b9a\u4e49\u7684\u6761\u76ee\uff0c\u5b83\u662f\u4ece .data \u4e2d\u504f\u79fb\u4e3a 0 \u5904\u5f00\u59cb\u7684\u4e00\u4e2a 8 \u5b57\u8282\u7684\u5df2\u521d\u59cb\u5316\u76ee\u6807 \\ bufp1\uff1a\u662fswap.o.symTabl\u7684\u6761\u76ee\uff0cglobal\u7c7b\u578b\u7684\u7b26\u53f7\uff0c\u5728swap.o\u4e2d\u5b9a\u4e49\uff0c\u5b83\u662f\u4e00\u4e2a\u672a\u521d\u59cb\u5316\u7684 8 \u5b57\u8282\u6570\u636e\u76ee\u6807\uff08\u8981\u6c42 8 \u5b57\u8282\u5bf9\u9f50\uff09\uff0c\u6700\u7ec8\u5f53 \u8fd9\u4e2a\u6a21\u5757\u88ab\u94fe\u63a5\u65f6\u5b83\u5c06\u4f5c\u4e3a\u4e00\u4e2a .bss \u76ee\u6807\u5206\u914d \\\nswap\uff1a\u662fswap.o.symTable\u7684\u6761\u76ee\uff0cfunc\u7c7b\u578b\u7684\u7b26\u53f7\uff0c\u5728swap.o\u4e2d\u5b9a\u4e49\uff0c\u5b83\u662f\u4e00\u4e2a\u4f4d\u4e8e .text \u4e2d\u504f\u79fb\u4e3a\u96f6\u5904\u7684 67 \u5b57\u8282\u7684\u51fd\u6570\u3002 \\\ntemp\uff1a\u4e0d\u5c5e\u4e8eswap.o.symTable\u6761\u76ee\uff0cint\u7c7b\u578b\u7684\u7b26\u53f7\uff0c\u5728swap.o\u4e2d\u5b9a\u4e49\uff0c\u5c40\u90e8\u53d8\u91cf\u4f4d\u4e8e\u6808\u4e2d\u7ba1\u7406\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"main.o\nSymbol table '.symtab' contains 13 entries:\nNum:    Value          Size Type    Bind   Vis      Ndx Name\n0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS main.c\n2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1\n3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3\n4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4\n5: 0000000000000000     0 SECTION LOCAL  DEFAULT    6\n6: 0000000000000000     0 SECTION LOCAL  DEFAULT    7\n7: 0000000000000000     0 SECTION LOCAL  DEFAULT    8\n8: 0000000000000000     0 SECTION LOCAL  DEFAULT    5\n9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf\n10: 0000000000000000    25 FUNC    GLOBAL DEFAULT    1 main\n11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap\n\n")),(0,i.kt)("p",null,"buf \u662f\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u4e00\u4e2a\u4f4d\u4e8e.data\u8282\u4e2d\u504f\u79fb\u4f4d0\u76848\u5b57\u8282\u76ee\u6807\u3002 \\\nmain \u4f4d\u4e8e.text\u8282\u4e2d\u504f\u79fb\u4e3a0\u768425\u5b57\u8282\u51fd\u6570"),(0,i.kt)("h6",{id:"objdump-relocation-entries"},"objdump relocation entries"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"objdump -D -r swap.o")," -d just .text\nResult"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"swap.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 <swap>:\n   0:   f3 0f 1e fa             endbr64 \n   4:   55                      push   %rbp\n   5:   48 89 e5                mov    %rsp,%rbp\n   8:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # f <swap+0xf>\n            b: R_X86_64_PC32    buf\n   f:   48 89 05 00 00 00 00    mov    %rax,0x0(%rip)        # 16 <swap+0x16>\n            12: R_X86_64_PC32   bufp1-0x4\n  16:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 1d <swap+0x1d>\n            19: R_X86_64_PC32   bufp0-0x4\n  1d:   8b 00                   mov    (%rax),%eax\n  1f:   89 45 fc                mov    %eax,-0x4(%rbp)\n  22:   48 8b 15 00 00 00 00    mov    0x0(%rip),%rdx        # 29 <swap+0x29>\n            25: R_X86_64_PC32   bufp1-0x4\n  29:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 30 <swap+0x30>\n            2c: R_X86_64_PC32   bufp0-0x4\n  30:   8b 12                   mov    (%rdx),%edx\n  32:   89 10                   mov    %edx,(%rax)\n  34:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 3b <swap+0x3b>\n            37: R_X86_64_PC32   bufp1-0x4\n  3b:   8b 55 fc                mov    -0x4(%rbp),%edx\n  3e:   89 10                   mov    %edx,(%rax)\n  40:   90                      nop\n  41:   5d                      pop    %rbp\n  42:   c3                      retq   \n\nDisassembly of section .bss:\n\n0000000000000000 <bufp1>:\n    ...\n\nDisassembly of section .data.rel:\n\n0000000000000000 <bufp0>:\n    ...\n            0: R_X86_64_64  buf\n\nDisassembly of section .comment:\n\n0000000000000000 <.comment>:\n   0:   00 47 43                add    %al,0x43(%rdi)\n   3:   43 3a 20                rex.XB cmp (%r8),%spl\n   6:   28 55 62                sub    %dl,0x62(%rbp)\n   9:   75 6e                   jne    79 <swap+0x79>\n   b:   74 75                   je     82 <swap+0x82>\n   d:   20 31                   and    %dh,(%rcx)\n   f:   30 2e                   xor    %ch,(%rsi)\n  11:   32 2e                   xor    (%rsi),%ch\n  13:   30 2d 31 33 75 62       xor    %ch,0x62753331(%rip)        # 6275334a <swap+0x6275334a>\n  19:   75 6e                   jne    89 <swap+0x89>\n  1b:   74 75                   je     92 <swap+0x92>\n  1d:   31 29                   xor    %ebp,(%rcx)\n  1f:   20 31                   and    %dh,(%rcx)\n  21:   30 2e                   xor    %ch,(%rsi)\n  23:   32 2e                   xor    (%rsi),%ch\n  25:   30 00                   xor    %al,(%rax)\n\nDisassembly of section .note.gnu.property:\n\n0000000000000000 <.note.gnu.property>:\n   0:   04 00                   add    $0x0,%al\n   2:   00 00                   add    %al,(%rax)\n   4:   10 00                   adc    %al,(%rax)\n   6:   00 00                   add    %al,(%rax)\n   8:   05 00 00 00 47          add    $0x47000000,%eax\n   d:   4e 55                   rex.WRX push %rbp\n   f:   00 02                   add    %al,(%rdx)\n  11:   00 00                   add    %al,(%rax)\n  13:   c0 04 00 00             rolb   $0x0,(%rax,%rax,1)\n  17:   00 03                   add    %al,(%rbx)\n  19:   00 00                   add    %al,(%rax)\n  1b:   00 00                   add    %al,(%rax)\n  1d:   00 00                   add    %al,(%rax)\n    ...\n\nDisassembly of section .eh_frame:\n\n0000000000000000 <.eh_frame>:\n   0:   14 00                   adc    $0x0,%al\n   2:   00 00                   add    %al,(%rax)\n   4:   00 00                   add    %al,(%rax)\n   6:   00 00                   add    %al,(%rax)\n   8:   01 7a 52                add    %edi,0x52(%rdx)\n   b:   00 01                   add    %al,(%rcx)\n   d:   78 10                   js     1f <.eh_frame+0x1f>\n   f:   01 1b                   add    %ebx,(%rbx)\n  11:   0c 07                   or     $0x7,%al\n  13:   08 90 01 00 00 1c       or     %dl,0x1c000001(%rax)\n  19:   00 00                   add    %al,(%rax)\n  1b:   00 1c 00                add    %bl,(%rax,%rax,1)\n  1e:   00 00                   add    %al,(%rax)\n  20:   00 00                   add    %al,(%rax)\n            20: R_X86_64_PC32   .text\n  22:   00 00                   add    %al,(%rax)\n  24:   43 00 00                rex.XB add %al,(%r8)\n  27:   00 00                   add    %al,(%rax)\n  29:   45 0e                   rex.RB (bad) \n  2b:   10 86 02 43 0d 06       adc    %al,0x60d4302(%rsi)\n  31:   7a 0c                   jp     3f <swap+0x3f>\n  33:   07                      (bad)  \n  34:   08 00                   or     %al,(%rax)\n    ...\n")),(0,i.kt)("h4",{id:"executable-object-files"},"Executable Object Files"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img_4.png",src:t(4151).Z,width:"1310",height:"680"}),"\nProgram header table ",(0,i.kt)("strong",{parentName:"p"},"Read only")),(0,i.kt)("h4",{id:"loading-executable-object-files"},"Loading Executable Object Files"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"loader")," copies the code and data in the executable object file from disk into memory and then runs the program by jumping to its first instruction, or\nentry point. \\\nthe code segment starts at address 0x400000, \u5bf9\u4e8eLinux\u800c\u8a00\uff0c0X400000\u4ee5\u4e0b\u7684\u7a7a\u95f4\u9ed8\u8ba4\u4e0d\u6620\u5c04\uff0c\u4ece\u800c\u8d77\u5230\u4fdd\u62a4\u7a0b\u5e8f\u5b89\u5168\u7684\u4f5c\u7528\u3002\u5bf9\u4e8ewindows\u800c\u8a00\uff0c\u7a0b\u5e8f\u5b89\u5168\u4ea4\u7531\u64cd\u4f5c\u7cfb\u7edf\u4fdd\u8bc1\uff0c\u56e0\u6b64\u6700\u5927\u9650\u5ea6\u5229\u7528\u8d44\u6e90\uff0c\u5730\u5740\u53ef\u4ee5\u4f4e\u52300X400000\u4ee5\u4e0b\u3002  \\\nthe data segment.\\\nthe heap.\\\nthe reserved for shared modules.\\\nthe user stack. below the largest legal user address (2 48 \u2212 1) and grows down, toward smaller memory addresses.\\\nthe kernel.memory-resident part of the operating system."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img_5.png",src:t(8373).Z,width:"1014",height:"940"})),(0,i.kt)("h4",{id:"static-linking"},"Static Linking"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Symbol resolution.symbol: a function, a global variable, or a static variable (model 'main(int i = 0)' is instruction)"),(0,i.kt)("li",{parentName:"ul"},"Relocation.Compilers and assemblers generate code and data sections\nthat start at address 0.")),(0,i.kt)("h4",{id:"dynamic-linking"},"Dynamic Linking"),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"shared library")," is an object module that, at either run time or load\ntime, can be loaded at an arbitrary memory address and linked with a program in\nmemory. \\\nLinux's systems are indicated by the .so suffix. Microsoft operating systems make heavy use of shared libraries, which they refer to as DLLs"),(0,i.kt)("p",null,"Shared libraries are \u201cshared\u201d in two different ways."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"exactly one .so file for a particular library. The code and data are shared by all executable object files that reference the library,"),(0,i.kt)("li",{parentName:"ol"},".text section in memory can be shared by different running processes.\n",(0,i.kt)("img",{alt:"img_7.png",src:t(5307).Z,width:"1032",height:"866"}))),(0,i.kt)("h5",{id:"the-dynamic-linker-then-finishes-the-linking-task-by-performing-the-following-relocations"},"The dynamic linker then finishes the linking task by performing the following relocations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Relocating the text and data of libc.so into some memory segment"),(0,i.kt)("li",{parentName:"ul"},"Relocating the text and data of libvector.so into another memory segment"),(0,i.kt)("li",{parentName:"ul"},"Relocating any references in prog2l to symbols defined by libc.so and libvector.so")),(0,i.kt)("h5",{id:"dynamic-linking-is-a-powerful-and-useful-technique"},"Dynamic linking is a powerful and useful technique:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Distributing software. use shared libraries to distribute software updates."),(0,i.kt)("li",{parentName:"ul"},"Building high-performance Web servers. generate dynamic\ncontent using a more efficient and sophisticated approach based on dynamic\nlinking. subsequent requests can be handled at the cost of a simple function call.xisting\nfunctions can be updated and new functions can be added at run time, without\nstopping the server.")),(0,i.kt)("h4",{id:"position-independent-code-pic"},"Position-Independent Code (PIC)"),(0,i.kt)("p",null,"Code that can be loaded without needing any relocations is known as position-\nindependent code (PIC). Users direct GNU compilation systems to generate PIC\ncode with the -fpic option to gcc. Shared libraries must always be compiled with\nthis option."),(0,i.kt)("p",null,"\u94fe\u63a5\u5668\u5728\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6bb5\u65b0\u5efa\u4e86\u4e00\u4e2a\u6570\u636e\u8282.got\nGlobal Offset Table, The GOT contains an 8-byte entry for each global data object that is referenced by the object module.The compiler also generates a relocation record for each entry in the GOT.\n",(0,i.kt)("img",{alt:"img_8.png",src:t(9672).Z,width:"1320",height:"568"}),"\n\u7531\u4e8e\u94fe\u63a5\u5668\u65e0\u6cd5\u4fee\u6539\u7f16\u8bd1\u5668\u4ea7\u751f\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u6240\u4ee5\u65e0\u6cd5\u4fee\u6539\u8c03\u7528\u5171\u4eab\u5e93\u7684\u51fd\u6570\u7684call\u6307\u4ee4\uff0c\u6240\u4ee5\u94fe\u63a5\u5668\u5728\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u65b0\u5efa\u4e00\u4e2a.plt\u8282\u5bf9\u6240\u6709\u5f15\u7528\u4e86\u5171\u4eab\u5e93\u4e2d\u7684\u51fd\u6570\u90fd\u5728\u8be5\u6570\u636e\u8282\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u51fd\u6570xxx@plt\uff0c\u7136\u540e\u5c06\u4ee3\u7801\u4e2d\u8c03\u7528\u5730\u5740\u66ff\u6362\u6210call xxx@plt\uff0c\u6240\u4ee5\u5c31\u80fd\u901a\u8fc7\u51fd\u6570xxx@plt\u6765\u5b8c\u6210\u5bf9.got\u7684\u66f4\u65b0\uff0c\u4ee5\u53ca\u6307\u5411\u6b63\u786e\u7684\u5730\u5740\u3002\nthe procedure linkage table (PLT).If an object module calls any functions that are defined in shared libraries, then it has its own GOT and PLT. The GOT is part of the data segment. The PLT is part of the code segment.\n",(0,i.kt)("inlineCode",{parentName:"p"},"Because addcnt is defined by the libvector.so module, the compiler can use the constant distance between the code segment and the data segment to generate a direct PC relative reference to addcnt, and add a relocation to let the linker construct this shared module Parse it. However, if addcnt is defined by another shared module, then indirect access via GOT is required. Here, the compiler chooses the most general solution, using GOT for all references."),"\\\n",(0,i.kt)("inlineCode",{parentName:"p"},"objdump -dx prog")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"000000000000077a <main>:\n 77a:   48 83 ec 08             sub    $0x8,%rsp\n 77e:   b9 02 00 00 00          mov    $0x2,%ecx\n 783:   48 8d 15 9e 08 20 00    lea    0x20089e(%rip),%rdx        # 201028 <z>\n 78a:   48 8d 35 7f 08 20 00    lea    0x20087f(%rip),%rsi        # 201010 <y>\n 791:   48 8d 3d 80 08 20 00    lea    0x200880(%rip),%rdi        # 201018 <x>\n 798:   e8 a3 fe ff ff          callq  640 <addvec@plt>\n 79d:   8b 0d 89 08 20 00       mov    0x200889(%rip),%ecx        # 20102c <z+0x4>\n 7a3:   8b 15 7f 08 20 00       mov    0x20087f(%rip),%edx        # 201028 <z>\n 7a9:   48 8d 35 a4 00 00 00    lea    0xa4(%rip),%rsi        # 854 <_IO_stdin_used+0x4>\n 7b0:   bf 01 00 00 00          mov    $0x1,%edi\n 7b5:   b8 00 00 00 00          mov    $0x0,%eax\n 7ba:   e8 91 fe ff ff          callq  650 <__printf_chk@plt>\n 7bf:   b8 00 00 00 00          mov    $0x0,%eax\n 7c4:   48 83 c4 08             add    $0x8,%rsp\n 7c8:   c3                      retq   \n 7c9:   0f 1f 80 00 00 00 00    nopl   0x0(%rax)\n")),(0,i.kt)("p",null,"\u5bf9addvec\u51fd\u6570\u548c\u5bf9prinrf\u51fd\u6570\u7684\u8c03\u7528\u8f6c\u5316\u4e3a\u4e86\u5bf9addvec@plt\u548c\u5bf9__printf_chk@plt\u51fd\u6570\u7684\u8c03\u7528\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u5c31\u662f\u5728.plt\u8282\u4e2d\u5b9a\u4e49\u7684\uff0c\u800c.plt\u8282\u4e2d\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Disassembly of section .plt:\n\n0000000000000630 <.plt>:\n 630:   ff 35 82 09 20 00       pushq  0x200982(%rip)        # 200fb8 <_GLOBAL_OFFSET_TABLE_+0x8>\n 636:   ff 25 84 09 20 00       jmpq   *0x200984(%rip)        # 200fc0 <_GLOBAL_OFFSET_TABLE_+0x10>\n 63c:   0f 1f 40 00             nopl   0x0(%rax)\n\n0000000000000640 <addvec@plt>:\n 640:   ff 25 82 09 20 00       jmpq   *0x200982(%rip)        # 200fc8 <addvec>\n 646:   68 00 00 00 00          pushq  $0x0\n 64b:   e9 e0 ff ff ff          jmpq   630 <.plt>\n\n0000000000000650 <__printf_chk@plt>:\n 650:   ff 25 7a 09 20 00       jmpq   *0x20097a(%rip)        # 200fd0 <__printf_chk@GLIBC_2.3.4>\n 656:   68 01 00 00 00          pushq  $0x1\n 65b:   e9 d0 ff ff ff          jmpq   630 <.plt>\n")),(0,i.kt)("p",null,"\u7531\u4e8e\u6211\u4eec\u65e0\u8bba\u5728\u5185\u5b58\u4ec0\u4e48\u4f4d\u7f6e\u52a0\u8f7d\u8be5\u76ee\u6807\u6a21\u5757\uff08\u5305\u62ec\u5171\u4eab\u76ee\u6807\u6a21\u5757\uff09\uff0c\u6570\u636e\u6bb5\u4e0e\u4ee3\u7801\u6bb5\u7684\u8ddd\u79bb\u603b\u662f\u4fdd\u6301\u4e0d\u53d8\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba9\u5904\u4e8e\u4ee3\u7801\u6bb5\u7684plt\u51fd\u6570\u901a\u8fc7\u8ddd\u79bb\u5e38\u91cf\u6765\u8bbf\u95ee\u5904\u4e8e\u6570\u636e\u6bb5\u4e2d\u5bf9\u5e94\u7684got\u4e2d\u4fdd\u5b58\u7684\u5730\u5740\u3002\n\u6bd4\u5982\u4e0a\u9762\u6211\u4eec\u8c03\u7528addvec@plt\u51fd\u6570\u65f6\uff0c\u4f1a\u6267\u884c0x640\u5904\u7684jmpq *0x200982(%rip)\u6307\u4ee4\uff0c \u8fd9\u91cc\u76840x200982\u5c31\u662f\u4e0a\u9762\u6240\u8bf4\u7684\u8ddd\u79bb\u5e38\u91cf\uff0c\u7528\u6765\u6307\u5411\u7279\u5b9a\u7684got\u9879\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u5230\u8bbf\u95ee\u7684got\u9879\u7684\u5730\u5740\u4e3a0x200982+0x646=0x200fc8\uff0c\u800c\u8be5\u5730\u5740\u5bf9\u5e94\u7684got\u5185\u5bb9\u5982\u4e0b\u6240\u793a\n",(0,i.kt)("inlineCode",{parentName:"p"},"0x00200fc0 00000000 00000000 46060000 00000000 ........F......."),"\n\u6839\u636e\u5c0f\u7aef\u6cd5\u53ef\u4ee5\u53ea\u4e3a0x664\uff0c\u5373\u8df3\u8f6c\u56de\u5230\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u7136\u540e\u8c03\u7528.plt\u51fd\u6570"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0000000000000630 <.plt>:\n 630:   ff 35 82 09 20 00       pushq  0x200982(%rip)        # 200fb8 <_GLOBAL_OFFSET_TABLE_+0x8>\n 636:   ff 25 84 09 20 00       jmpq   *0x200984(%rip)        # 200fc0 <_GLOBAL_OFFSET_TABLE_+0x10>\n 63c:   0f 1f 40 00             nopl   0x0(%rax)\n")),(0,i.kt)("p",null,"\u5176\u4e2d\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\u5c06\u5730\u57400x200982+0x636=0x200fb8\u4f5c\u4e3a\u53c2\u6570\u538b\u5165\u6808\u4e2d\uff0c\u800c\u7b2c\u4e8c\u6761\u6307\u4ee4\u662f\u8df3\u8f6c\u52300x200984+0x63c=0x200fc0\u5904\u4fdd\u5b58\u7684\u5730\u5740\uff0c\u6211\u4eec\u901a\u8fc7\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u672a\u8fd0\u884c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u8be5\u5730\u5740\u7684\u503c\u4e3a0\uff0c\u800c\u5f53\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u8be5\u5730\u5740\u7684\u503c\u4f1a\u4fee\u6539\u5230\u52a8\u6001\u94fe\u63a5\u5668\u4e2d\u7684_dl_runtime_resolve\u51fd\u6570\uff0c\u6765\u8fdb\u884c\u5730\u5740\u89e3\u6790\uff0c\u67e5\u770b\u5171\u4eab\u5e93\u7684addvec\u88ab\u52a0\u8f7d\u5230\u4ec0\u4e48\u5185\u5b58\u5730\u5740\u3002\u90a3\u8be5\u51fd\u6570\u662f\u5982\u4f55\u77e5\u9053\u8981\u83b7\u5f97\u54ea\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ee5\u53ca\u8981\u5c06\u51fd\u6570\u5730\u5740\u4fdd\u5b58\u5230\u54ea\u4e2agot\u9879\u5462\uff1f"),(0,i.kt)("p",null,"\u6211\u4eec\u89c2\u5bdf\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u4ee5\u4e0b\u5171\u4eab\u5e93\u7684\u51fd\u6570"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0000000000000640 <addvec@plt>:\n 640:   ff 25 82 09 20 00       jmpq   *0x200982(%rip)        # 200fc8 <addvec>\n 646:   68 00 00 00 00          pushq  $0x0\n 64b:   e9 e0 ff ff ff          jmpq   630 <.plt>\n\n0000000000000650 <__printf_chk@plt>:\n 650:   ff 25 7a 09 20 00       jmpq   *0x20097a(%rip)        # 200fd0 <__printf_chk@GLIBC_2.3.4>\n 656:   68 01 00 00 00          pushq  $0x1\n 65b:   e9 d0 ff ff ff          jmpq   630 <.plt>\n")),(0,i.kt)("p",null,"\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u51fd\u6570\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684got\u9879\uff0c\u800c\u5bf9\u5e94\u7684got\u9879\u88ab\u521d\u59cb\u5316\u4e3a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5f53got\u9879\u6ca1\u6709\u88ab\u4fee\u6539\u65f6\uff0c\u5c31\u81ea\u52a8\u8df3\u8f6c\u5230\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u800c\u7b2c\u4e8c\u6761\u6307\u4ee4\u5728\u4e0d\u540c\u51fd\u6570\u4e2d\u662f\u4e0d\u540c\u7684\uff0c\u5176\u5b9e\u5bf9\u5e94\u7684\u662f.rela.plt\u7684\u7d22\u5f15"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Relocation section '.rela.plt' at offset 0x5e8 contains 2 entries:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000200fc8  000300000007 R_X86_64_JUMP_SLO 0000000000000000 addvec + 0\n000000200fd0  000500000007 R_X86_64_JUMP_SLO 0000000000000000 __printf_chk@GLIBC_2.3.4 + 0\n")),(0,i.kt)("p",null,"\u5176\u4e2d\uff0coffset\u8868\u793a\u5bf9\u5e94\u7684got\u9879\u7684\u5730\u5740\uff0cSym.Name\u5c31\u662f\u51fd\u6570\u7684\u540d\u5b57\u3002\u6240\u4ee5\u52a8\u6001\u94fe\u63a5\u5668\u901a\u8fc7\u7d22\u5f15\u503c\u548c.rela.plt\u6570\u636e\u7ec4\u5c31\u80fd\u786e\u5b9a\u8981\u5b9a\u4f4d\u54ea\u4e2a\u52a8\u6001\u5e93\u51fd\u6570\uff0c\u4ee5\u53ca\u5c06\u5176\u5185\u5b58\u5730\u5740\u4fdd\u5b58\u5230\u54ea\u4e2agot\u9879\u3002"),(0,i.kt)("p",null,"\u5f53\u52a8\u6001\u94fe\u63a5\u540e\u7684addvec\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684got\u9879\u65f6\uff0c\u4e0b\u6b21\u518d\u8c03\u7528addvec\u51fd\u6570\u65f6\uff0c\u5c31\u80fd\u76f4\u63a5\u901a\u8fc7\u8be5got\u9879\u76f4\u63a5\u83b7\u5f97addvec\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740\u3002"),(0,i.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u5171\u4eab\u5e93\u7684\u51fd\u6570\u65f6\uff0c\u5bf9\u5e94\u7684xxx@plt\u51fd\u6570\u5e76\u4e0d\u4f1a\u8df3\u8f6c\u5230\u6b63\u786e\u7684\u51fd\u6570\u5730\u5740\uff0c\u800c\u662f\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u5668\u6765\u83b7\u5f97\u51fd\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u5c06\u5176\u4fdd\u5b58\u5230got\u9879\u4e2d\uff0c\u4e0b\u4e00\u6b21\u518d\u8fd0\u884c\u65f6\uff0c\u624d\u4f1a\u8df3\u8f6c\u5230\u6b63\u786e\u7684\u51fd\u6570\u5730\u5740\uff0c\u8be5\u65b9\u6cd5\u79f0\u4e3a\u5ef6\u8fdf\u7ed1\u5b9a\uff08Lazy Binding\uff09\uff0c\u53ea\u6709\u5171\u4eab\u5e93\u7684\u51fd\u6570\u8981\u7528\u65f6\uff0c\u624d\u4f1a\u91cd\u5b9a\u4f4d\u5b83\u7684\u5730\u5740\uff0c\u5426\u5219\u4e0d\u4f1a\uff0c\u7531\u6b64\u9632\u6b62\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u52a0\u8f7d\u65f6\u9700\u8981\u5bf9\u5927\u91cf\u7684\u5171\u4eab\u5e93\u7684\u5730\u5740\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002"),(0,i.kt)("p",null,"\u7efc\u4e0a\u6240\u8ff0\uff1a\u5f53\u51fd\u6570\u8981\u8bbf\u95ee\u5171\u4eab\u5e93\u4e2d\u7684\u51fd\u6570\u65f6\uff0c\u5b9e\u73b0\u6267\u884ccall xxx@plt\uff0c\u8bbf\u95ee\u8be5\u51fd\u6570\u7684\u5c01\u88c5\u51fd\u6570\uff0c\u7136\u540e\u8be5plt\u51fd\u6570\u4f1a\u8bbf\u95ee\u5bf9\u5e94\u7684got\u9879\uff0c\u5982\u679cgot\u9879\u88ab\u8d4b\u503c\u4e3a\u5bf9\u5e94\u7684xxx\u51fd\u6570\u7684\u5730\u5740\uff0c\u5219\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5426\u5219\u4f1a\u8c03\u7528.plt","[0]","\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u6765\u5b9a\u4f4dxxx\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740\uff0c\u7136\u540e\u5c06\u5176\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684got\u9879\u4e2d\u3002\n\u56e0\u4e3a addcnt \u662f\u7531 libvector.so \u6a21\u5757\u5b9a\u4e49\u7684\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u5229\u7528\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u4e4b\u95f4\u4e0d\u53d8\u7684\u8ddd\u79bb\uff0c\u4ea7\u751f\u5bf9 addcnt \u7684\u76f4\u63a5 PC \u76f8\u5bf9\u5f15\u7528\uff0c\u5e76\u589e\u52a0\u4e00\u4e2a\u91cd\u5b9a\u4f4d\uff0c\u8ba9\u94fe\u63a5\u5668\u5728\u6784\u9020\u8fd9\u4e2a\u5171\u4eab\u6a21\u5757\u65f6\u89e3\u6790\u5b83\u3002\u4e0d\u8fc7\uff0c\u5982\u679c addcnt \u662f\u7531\u53e6\u4e00\u4e2a\u5171\u4eab\u6a21\u5757\u5b9a\u4e49\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u901a\u8fc7 GOT \u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee\u3002\u5728\u8fd9\u91cc\uff0c\u7f16\u8bd1\u5668\u9009\u62e9\u91c7\u7528\u6700\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e3a\u6240\u6709\u7684\u5f15\u7528\u4f7f\u7528 GOT\u3002\n",(0,i.kt)("img",{alt:"img_9.png",src:t(8332).Z,width:"778",height:"932"}),"\nStep 1. Instead of directly calling addvec, the program calls into PLT","[2]",", which\nis the PLT entry for addvec. \\\nStep 2. The first PLT instruction does an indirect jump through GOT","[4]",". Since\neach GOT entry initially points to the second instruction in its correspond-\ning PLT entry, the indirect jump simply transfers control back to the next\ninstruction in PLT","[2]",". \\\nStep 3. After pushing an ID for addvec (0x1) onto the stack, PLT","[2]"," jumps to\nPLT","[0]",". \\\nStep 4. PLT","[0]"," pushes an argument for the dynamic linker indirectly through\nGOT","[1]"," and then jumps into the dynamic linker indirectly through GOT","[2]",".\nThe dynamic linker uses the two stack entries to determine the run-\ntime location of addvec, overwrites GOT","[4]"," with this address, and passes\ncontrol to addvec.\n",(0,i.kt)("img",{alt:"img_10.png",src:t(6234).Z,width:"694",height:"918"}),"\nStep 1. Control passes to PLT","[2]"," as before.\\\nStep 2. However, this time the indirect jump through GOT","[4]"," transfers control\ndirectly to addvec."),(0,i.kt)("h4",{id:"library-interpositioning"},"Library Interpositioning"),(0,i.kt)("p",null,"library interpositioning,allows you to intercept calls to shared library functions and execute your own code instead.\\\n",(0,i.kt)("strong",{parentName:"p"},"basic idea:")," Given some target function to be interposed on, you\ncreate a wrapper function whose prototype is identical to the target function. Using\nsome particular interpositioning mechanism, you then trick the system into calling\nthe wrapper function instead of the target function. The wrapper function typically\nexecutes its own logic, then calls the target function and passes its return value\nback to the caller."),(0,i.kt)("p",null,"Interpositioning can occur at compile time, link time, or run time as the\nprogram is being loaded and executed.\nExample program int.c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-code/link/interpose/int.c"},"#include <stdio.h>\n#include <malloc.h>\n\nint main()\n{\n    int *p = malloc(32);\n    free(p);\n    return(0);\n}\n")),(0,i.kt)("h5",{id:"1-compile-time-interpositioning"},"1. Compile-Time Interpositioning"),(0,i.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u672c\u5730\u7684\u5934\u6587\u4ef6malloc.h\uff0c\u5982\u4e0b\u6240\u793a\nLocal malloc.h file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-code/link/interpose/malloc.h"},"#define malloc(size) mymalloc(size)\n#define free(ptr) myfree(ptr)\n")),(0,i.kt)("p",null,"\u7136\u540e\u5728\u7f16\u8bd1int.c\u65f6\uff0c\u4f7f\u7528-I.\u7f16\u8bd1\u9009\u9879\uff0c\u4f7f\u5f97\u9884\u5904\u7406\u5668\u9996\u5148\u4ece\u672c\u5730\u67e5\u627emalloc.h\u6587\u4ef6\uff0c\u7531\u6b64\u5c31\u80fd\u5c06\u5171\u4eab\u5e93\u7684malloc\u548cfree\u51fd\u6570\u66ff\u6362\u6210\u6211\u4eec\u81ea\u5df1\u7684mymalloc\u6df7\u5408myfree\u51fd\u6570\u3002\n\u800c\u6211\u4eec\u9700\u8981\u81ea\u5df1\u5b9e\u73b0mymalloc\u548cmyfree\u51fd\u6570\uff0c\u5176\u4e2d\u9700\u8981\u8c03\u7528\u539f\u59cb\u7684malloc.h\uff0c\u7531\u4e8emalloc.h\u4f7f\u7528\u4e86#define\u6307\u4ee4\uff0c\u6211\u4eec\u540e\u9762\u9700\u8981malloc\u7684\u5730\u65b9\u90fd\u4f1a\u88abmymalloc\u66ff\u4ee3\u3002\n\u800cmymalloc.c\u4ee3\u7801\u5982\u4e0b\uff1a\nWrapper functions in mymalloc.c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mymalloc.c"},'#ifdef COMPILETIME //\u7f16\u8bd1\u9009\u9879\u662fCOMPILETIME \uff0c\u8fd9\u6bb5\u4ee3\u7801\u624d\u4f1a\u7f16\u8bd1\u8fdb\u53bb\n#include <stdio.h>\n#include <malloc.h>\n\n/* malloc wrapper function */\nvoid *mymalloc(size_t size)\n{\n    void *ptr = malloc(size);\n    printf("malloc(%d)=%p\\n",\n           (int)size, ptr);\n    return ptr;\n}\n\n/* free wrapper function */\nvoid myfree(void *ptr)\n{\n    free(ptr);\n    printf("free(%p)\\n", ptr);\n    printf("COMPILETIME\\n");\n}\n#endif\n')),(0,i.kt)("p",null,"\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u5f97\u5230\u8be5\u51fd\u6570\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6mymalloc.o "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"gcc -DCOMPILETIME -c mymalloc.c\n")),(0,i.kt)("p",null,"\u7136\u540e\u5728\u672c\u5730\u7684malloc.h\u4e2d\u7ed9\u51fa\u5305\u88c5\u51fd\u6570\u7684\u51fd\u6570\u539f\u578b\uff0c\u5373"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-code/link/interpose/malloc.h"},"#define malloc(size) mymalloc(size)\n#define free(ptr) myfree(ptr)\n\nvoid *mymalloc(size_t size);\nvoid myfree(void *ptr);\n")),(0,i.kt)("p",null,"\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u884c\u8fdb\u884c\u7f16\u8bd1\u65f6\u6253\u6869"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"gcc -I. -o intc int.c mymalloc.o\n")),(0,i.kt)("p",null,"\u6b64\u65f6\uff0c\u7531\u4e8e-I.\u7f16\u8bd1\u9009\u9879\uff0c\u5bf9\u4e8eint.c\u4e2d\u7684malloc.h\uff0c\u9884\u5904\u7406\u5668\u4f1a\u9996\u5148\u4ece\u672c\u5730\u641c\u7d22malloc.h\u6587\u4ef6\uff0c\u800c\u5728\u672c\u5730malloc.h\u6587\u4ef6\u4e2d\uff0c\u5bf9malloc\u548cfree\u51fd\u6570\u91cd\u65b0\u5305\u88c5\u6210mymalloc\u548cmyfree\u51fd\u6570\uff0c\u800c\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728\u4e4b\u524d\u7f16\u8bd1\u597d\u7684mymalloc.o\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\uff0c\u6b64\u65f6\u5c31\u5b8c\u6210\u4e86\u7f16\u8bd1\u65f6\u6253\u6869\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"malloc(32)=0x558ca12fc2a0\nfree(0x558ca12fc2a0)\nCOMPILETIME\n")),(0,i.kt)("p",null,"\u4f7f\u7528malloc\u7684\u5730\u65b9\uff0c\u90fd\u88ab\u66ff\u6362\u6210\u4e86mymalloc\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-int.i"},"void *mymalloc(size_t size);\nvoid myfree(void *ptr);\n")),(0,i.kt)("h5",{id:"2-link-time-interpositioning"},"2. Link-Time Interpositioning"),(0,i.kt)("p",null,"Linux\u9759\u6001\u94fe\u63a5\u5668\u4e5f\u652f\u6301\u4f7f\u7528--wrap f\u6807\u5fd7\u8fdb\u884c\u94fe\u63a5\u65f6\u6253\u6869\uff0c\u6b64\u65f6\u4f1a\u5c06\u7b26\u53f7f\u89e3\u6790\u4e3a",(0,i.kt)("strong",{parentName:"p"},"wrap_f\uff0c\u800c\u5c06\u5bf9"),"real_f\u7b26\u53f7\u7684\u5f15\u7528\u89e3\u6790\u4e3af\uff0c \u610f\u5473\u7740\u539f\u59cb\u5bf9\u51fd\u6570f\u7684\u8c03\u7528\uff0c\u8fd8\u4f1a\u66ff\u6362\u6210\u5bf9",(0,i.kt)("strong",{parentName:"p"},"wrap_f\u51fd\u6570\u7684\u8c03\u7528\uff0c\u800c\u901a\u8fc7"),"real_f\u51fd\u6570\u6765\u8c03\u7528\u539f\u59cb\u51fd\u6570f\u3002\n\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u51fd\u6570"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mymalloc.c"},'#ifdef LINKTIME\n#include <stdio.h>\n\nvoid *__real_malloc(size_t size);\nvoid __real_free(void *ptr);\n\n/* malloc wrapper function */\nvoid *__wrap_malloc(size_t size)\n{\n    void *ptr = __real_malloc(size); /* Call libc malloc */\n    printf("malloc(%d) = %p\\n", (int)size, ptr);\n    return ptr;\n}\n\n/* free wrapper function */\nvoid __wrap_free(void *ptr)\n{\n    __real_free(ptr); /* Call libc free */\n    printf("free(%p)\\n", ptr);\n    printf("LINKTIME\\n");\n}\n#endif\n\n')),(0,i.kt)("p",null,"\u540c\u65f6\u8fdb\u884c\u7f16\u8bd1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"gcc -DLINKTIME -Wl,--wrap,malloc -Wl,--wrap,free -o intl int.c mymalloc.c\n")),(0,i.kt)("p",null,"\u4e5f\u53ef\u4ee5\u5206\u5f00\u7f16\u8bd1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"gcc -DLINKTIME -c mymalloc.c\ngcc -c int.c\ngcc -Wl,--wrap,malloc -Wl,--wrap,free -o intl int.o mymalloc.o\n")),(0,i.kt)("p",null,"-Wl,option \u628a\u6807\u5fd7 option \u4f20\u9012\u7ed9\u94fe\u63a5\u5668\u3002option\u4e2d\u7684\u6bcf\u4e2a\u9017\u53f7\u90fd\u8981\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u683c\u3002\u6240\u4ee5 -Wl,--wrap,malloc \u5c31\u628a --wrap malloc \u4f20\u9012\u7ed9\u94fe\u63a5\u5668\uff0c\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4f20\u9012 -Wl,--wrap,free\u3002 "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"malloc(32)=0x558ca12fc2a0\nfree(0x558ca12fc2a0)\nLINKTIME\n")),(0,i.kt)("p",null,"\u7531\u6b64\uff0c\u5229\u7528\u94fe\u63a5\u5668\u7684\u6253\u6869\u673a\u5236, int.c\u4e2d\u5bf9malloc\u548cfree\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4f1a\u53d8\u6210\u5bf9",(0,i.kt)("strong",{parentName:"p"},"wrap_malloc\u548c"),"wrap_free\u51fd\u6570\u7684\u8c03\u7528\u3002\u800c__real_malloc\u5c06\u4f1a\u88ab\u89e3\u6790\u6210\u771f\u6b63\u7684malloc\u3002"),(0,i.kt)("p",null,"\u7efc\u4e0a\u6240\u8ff0\uff1a\u60f3\u8981\u5728\u94fe\u63a5\u65f6\u6253\u6869\uff0c\u610f\u5473\u7740\u5728\u5bf9\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8fdb\u884c\u89e3\u6790\u65f6\uff0c\u8fdb\u884c\u66ff\u6362\u3002"),(0,i.kt)("h5",{id:"3-run-time-interpositioning"},"3. Run-Time Interpositioning"),(0,i.kt)("p",null,"\u8fd0\u884c\u65f6\u8fdb\u884c\u6253\u6869\uff0c\u610f\u5473\u7740\u662f\u5bf9\u5171\u4eab\u5e93\u7684\u51fd\u6570\u8fdb\u884c\u6253\u6869\uff0c\u8fd9\u91cc\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\u5668\u63d0\u4f9b\u7684LD_PRELOAD\u73af\u5883\u53d8\u91cf\uff0c\u901a\u8fc7\u8be5\u53d8\u91cf\u8bbe\u7f6e\u5171\u4eab\u5e93\u8def\u5f84\u5217\u8868\uff0c\u6267\u884c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u5148\u641c\u7d22LD_PRELOAD\u5171\u4eab\u5e93\u3002\n\u5b9a\u4e49\u4ee5\u4e0b\u51fd\u6570"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mymalloc.c"},'#ifdef RUNTIME\n#define _GNU_SOURCE\n#include <stdio.h>\n#include <stdlib.h>\n#include <dlfcn.h>\n\n/* malloc wrapper function */\u800c__real_malloc\u5c06\u4f1a\u88ab\u89e3\u6790\u6210\u771f\u6b63\u7684malloc\u3002\n\nvoid *malloc(size_t size)\n{\n    void *(*mallocp)(size_t size);\n    char *error;\n\n    mallocp = dlsym(RTLD_NEXT, "malloc"); /* Get address of libc   malloc */ \n    if ((error = dlerror()) != NULL) { \n        fputs(error, stderr);\n        exit(1);\n    }\n    char *ptr = mallocp(size); /* Call libc malloc */\n//  printf("malloc(%d) = %p\\n", (int)size, ptr);\n    return ptr;\n}\n\n/* free wrapper function */\nvoid free(void *ptr)\n{\n    void (*freep)(void *) = NULL;\n    char *error;\n\n    if (!ptr)\n    return;\n\n    freep = dlsym(RTLD_NEXT, "free"); /* Get address of libc free */\n    if ((error = dlerror()) != NULL) {\n        fputs(error, stderr);\n        exit(1);\n    }\n    freep(ptr); /* Call libc free */\n    printf("free(%p)\\n", ptr);\n    printf("RUNTIME\\n");\n}\n#endif\n')),(0,i.kt)("p",null,"\u7136\u540e\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u884c\u5c06\u5176\u7f16\u8bd1\u6210\u5171\u4eab\u5e93"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"gcc -DRUNTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl \n")),(0,i.kt)("p",null,"\u7136\u540e\u7f16\u8bd1\uff0c\u5728\u8fd0\u884c\u65f6\u6307\u5b9a\u73af\u5883\u53d8\u91cfLD_PRELOAD"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'gcc -o intr int.c\nLD_PRELOAD="./mymalloc.so" ./intr \n')),(0,i.kt)("p",null,"\u6b64\u65f6\u8fd0\u884c\u5230malloc\u548cfree\u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u5668\u641c\u7d22\u8be5\u7b26\u53f7\u7684\u5b9a\u4e49\uff0c\u6b64\u65f6\u4f1a\u5148\u641c\u7d22LD_PRELOAD\u6307\u5b9a\u7684\u5171\u4eab\u5e93\uff0c\u800cmymalloc.so\u4e2d\u5b9a\u4e49\u4e86\u8fd9\u4e24\u4e2a\u7b26\u53f7\uff0c\u6240\u4ee5\u5c31\u66ff\u6362\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u6ce8\u610f\uff1a\u5982\u679c\u60f3\u8981\u8c03\u7528\u539f\u59cb\u7684\u5b9a\u4e49\uff0c\u5c31\u9700\u8981\u7528\u8fd0\u884c\u52a8\u6001\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7\u6307\u5b9adlsym\u7684\u53c2\u6570\u4e3aRTLD_NEXT\uff0c\u6765\u5728\u540e\u7eed\u7684\u5171\u4eab\u5e93\u4e2d\u83b7\u5f97malloc\u7684\u5b9a\u4e49\u3002 "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'"./mymalloc.so" ./intr \nfree(0x55a98bc572a0)\nRUNTIME\n\n')),(0,i.kt)("p",null,"GNU binutils \u5305\u5c24\u5176\u6709\u5e2e\u52a9\uff0c\u800c\u4e14\u53ef\u4ee5\u8fd0\u884c\u5728\u6bcf\u4e2a Linux \u5e73\u53f0\u4e0a\u3002\nAR\uff1a\u521b\u5efa\u9759\u6001\u5e93\uff0c\u63d2\u5165\u3001\u5220\u9664\u3001\u5217\u51fa\u548c\u63d0\u53d6\u6210\u5458\u3002\nSTRINGS\uff1a\u5217\u51fa\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4e2d\u6240\u6709\u53ef\u6253\u5370\u7684\u5b57\u7b26\u4e32\u3002\nSTRIP\uff1a\u4ece\u76ee\u6807\u6587\u4ef6\u4e2d\u5220\u9664\u7b26\u53f7\u8868\u4fe1\u606f\u3002\nNM\uff1a\u5217\u51fa\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u3002\nSIZE\uff1a\u5217\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u8282\u7684\u540d\u5b57\u548c\u5927\u5c0f\u3002\nREADELF\uff1a\u663e\u793a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u7ed3\u6784\uff0c\u5305\u62ec ELF \u5934\u4e2d\u7f16\u7801\u7684\u6240\u6709\u4fe1\u606f\u3002\u5305\u542b SIZE \u548c NM \u7684\u529f\u80fd\u3002\nOBJDUMP\uff1a\u6240\u6709\u4e8c\u8fdb\u5236\u5de5\u5177\u4e4b\u6bcd\u3002\u80fd\u591f\u663e\u793a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4e2d\u6240\u6709\u7684\u4fe1\u606f\u3002\u5b83\u6700\u5927\u7684\u4f5c\u7528\u662f\u53cd\u6c47\u7f16 .text \u8282\u4e2d\u7684\u4e8c\u8fdb\u5236\u6307\u4ee4\u3002\nLinux \u7cfb\u7edf\u4e3a\u64cd\u4f5c\u5171\u4eab\u5e93\u8fd8\u63d0\u4f9b\u4e86 LDD \u7a0b\u5e8f\uff1a\nLDD\uff1a\u5217\u51fa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5728\u8fd0\u884c\u65f6\u6240\u9700\u8981\u7684\u5171\u4eab\u5e93\u3002"))}m.isMDXComponent=!0},6234:function(e,n,t){n.Z=t.p+"assets/images/img_10-e75921c4e5bc39941f7a09e28cb31ce8.png"},4215:function(e,n,t){n.Z=t.p+"assets/images/img_2-7ea081012bfb8ce50223762d38db5d56.png"},2217:function(e,n,t){n.Z=t.p+"assets/images/img_3-f6ba88724de654678c793e808d4d1437.png"},4151:function(e,n,t){n.Z=t.p+"assets/images/img_4-920357f5483a3c3f2b2dfde382453ae8.png"},8373:function(e,n,t){n.Z=t.p+"assets/images/img_5-1312c575e79c44ef649452c1944c51c6.png"},3950:function(e,n,t){n.Z=t.p+"assets/images/img_6-ce6a03bde9531a6cbe27f45be64d85e2.png"},5307:function(e,n,t){n.Z=t.p+"assets/images/img_7-3e602ac16c6f7bc20aa75cf5499d068d.png"},9672:function(e,n,t){n.Z=t.p+"assets/images/img_8-2c2e9c5bbe85954467a1e2ea069981b5.png"},8332:function(e,n,t){n.Z=t.p+"assets/images/img_9-d1d3c70726ac6a65c9a5585bcc6b97bc.png"}}]);